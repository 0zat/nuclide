#!/usr/bin/env python

# Copyright (c) 2015-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the license found in the LICENSE file in
# the root directory of this source tree.

# Updates npm-shrinkwrap files for Nuclide packages.
# By default updates shrinkwraps for all packages.
# Alternatively, an explicit list of package names may be provided.

# Set up the logging early on in the process.
import logging
logging.basicConfig(level=logging.INFO, format='%(message)s')

# Do other ordinary imports.
import errno
import os.path
import sys

# Add the lib/ directory to $PYTHONPATH so library code can be imported.
sys.path.append(os.path.join(os.path.dirname(__file__), '../lib'))

from package_manager import PackageManager
from npm import Npm
from topological_installer import install_dependencies

# Parse the command-line arguments.
import optparse
parser = optparse.OptionParser(usage='usage: %prog [options] [package_name0][package_name1]',
                               description='Update npm-shrinkwrap.json files for Nuclide packages. ' +
                               'If no package names are specified, then all shrinkwrap files are ' +
                               ' updated.')
parser.add_option('--verbose', action='store_true', default=False, help='Verbose output from npm install')
options, args = parser.parse_args(sys.argv[1:])

verbose = options.verbose
if verbose:
    logging.getLogger().setLevel(logging.DEBUG)


def update_all_shrinkwraps(npm, package_manager):
    for config in package_manager.get_configs():
        update_shrinkwrap(npm, config)


def update_shrinkwrap(npm, config):
    package_dir = config['packageRootAbsolutePath'];
    shrinkwrap_file = os.path.join(package_dir, 'npm-shrinkwrap.json')
    try:
        os.remove(shrinkwrap_file)
    except OSError as e:
        if e.errno != errno.ENOENT:
            raise
    npm.clean(package_dir)
    install_dependencies(config, npm)
    npm.shrinkwrap(package_dir)


package_manager = PackageManager()
npm = Npm(verbose)

if len(args) == 0:
    update_all_shrinkwraps(npm, package_manager)
else:
    package_map = package_manager.get_package_map()
    for package_name in args:
        if (package_name not in package_map):
            raise ValueError(package_name + ' is not a valid package name.')
        update_shrinkwrap(npm, package_map[package_name])
