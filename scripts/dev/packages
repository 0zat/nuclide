#!/usr/bin/env python

# Copyright (c) 2015-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the license found in the LICENSE file in
# the root directory of this source tree.

# Lists the package.json files for all Nuclide packages.
# Packages are listed in topologically sorted order.
# This is designed to be used as the basis for other scripting tasks.

# Set up the logging early on in the process.
import logging
logging.basicConfig(level=logging.INFO, format='%(message)s')

# Do other ordinary imports.
import os.path
import sys

# Add the lib/ directory to $PYTHONPATH so library code can be imported.
sys.path.append(os.path.join(os.path.dirname(__file__), '../lib'))

# Parse the command-line arguments.
import optparse
parser = optparse.OptionParser(usage='usage: %prog [options]',
                               description='Lists Nuclide packages')
parser.add_option('--package-type', type=str, help='Node or Atom', default=None)
parser.add_option('--test-runner', type=str, help='npm or apm', default=None)
parser.add_option('--name-only', action='store_true', help='print only the name', default=False)
options, args = parser.parse_args(sys.argv[1:])

config_filters = []

# Add filters for --package-type.
if options.package_type == 'Node':
    package_type_filter = lambda config: config['isNodePackage']
    config_filters += [package_type_filter]
elif options.package_type == 'Atom':
    package_type_filter = lambda config: not config['isNodePackage']
    config_filters += [package_type_filter]

# Add filters for --test-runner.
if options.test_runner:
    config_filters += [lambda config: config['testRunner'] == options.test_runner]

# Apply each filter to the config and take the boolean AND of the results.
import operator
config_filter = lambda config: reduce(operator.and_, map(lambda fn: fn(config), config_filters), True)

from package_manager import PackageManager
package_manager = PackageManager()
for config in package_manager.get_configs():
    if config_filter(config):
        if options.name_only:
            print(config['name'])
        else:
            print(os.path.normpath(os.path.join(config['packageRootAbsolutePath'], 'package.json')))
