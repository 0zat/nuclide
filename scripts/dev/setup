#!/usr/bin/env python

# Copyright (c) 2015-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the license found in the LICENSE file in
# the root directory of this source tree.

# Set up the logging early on in the process.
import logging
logging.basicConfig(level=logging.INFO, format='%(message)s')

# Do other ordinary imports.
import os.path
import sys

# Add the lib/ directory to $PYTHONPATH so library code can be imported.
sys.path.append(os.path.join(os.path.dirname(__file__), '../lib'))

# Parse the command-line arguments.
import atom
import optparse
parser = optparse.OptionParser(usage='usage: %prog [options]',
                               description='Install Nuclide packages for development')
parser.add_option('--no-atom', action='store_true', default=False, help='Exclude packages that depend on Atom')
parser.add_option('--verbose', action='store_true', default=False, help='Verbose output from npm install')
atom.add_args_for_env_setup(parser)
options, args = parser.parse_args(sys.argv[1:])

# When installing the server packages, only `node` and `npm` need to be on the $PATH.
include_apm = not options.no_atom
atom.add_node_executables_to_path(parser, include_apm)

verbose = options.verbose
if verbose:
    logging.getLogger().setLevel(logging.DEBUG)

# Run pre installation setup actions.
from pre_installation_setup import setup 
setup()

# Enumerate and install packages.
from npm import Npm
from package_manager import PackageManager

package_manager = PackageManager()
npm = Npm(verbose)
package_manager.install_dependencies(npm, include_packages_that_depend_on_atom=include_apm)

# Remove any dead symlinks under ~/.atom/packages. These can be created when a package is deleted or
# renamed and a reference to the old package is still hanging around.
if include_apm:
    import os
    import subprocess
    packages_dir = os.path.expanduser('~/.atom/packages')
    for entry in os.listdir(packages_dir):
        full_path = os.path.join(packages_dir, entry)
        if os.path.islink(full_path) and not os.path.exists(full_path):
            logging.info('Removing broken symlink %s', full_path)
            subprocess.check_call(['apm', 'uninstall', entry])
