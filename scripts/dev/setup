#!/usr/bin/env python

# Copyright (c) 2015-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the license found in the LICENSE file in
# the root directory of this source tree.

import logging
import optparse
import os.path
import subprocess
import sys
from datetime import datetime

# Set up the logging early on in the process.
logging.basicConfig(level=logging.INFO, format='%(message)s')

# Add the lib/ directory to $PYTHONPATH so library code can be imported.
sys.path.append(os.path.join(os.path.dirname(__file__), '../lib'))

import atom
from package_manager import NUCLIDE_PATH

try:
    from fb.pre_setup import fb_pre_setup
except ImportError as e:
    fb_pre_setup = None

# Parse the command-line arguments.
parser = optparse.OptionParser(usage='usage: %prog [options]',
                               description='Install Nuclide packages for development')
parser.add_option('--no-atom', action='store_true', default=False,
                  help='Exclude packages that depend on Atom')
parser.add_option('--production', action='store_true', default=False,
                  help='Install only production dependencies')
parser.add_option('--verbose', action='store_true', default=False,
                  help='Verbose output from npm install')
atom.add_args_for_env_setup(parser)
options, args = parser.parse_args(sys.argv[1:])

# When installing the server packages, only `node` and `npm` need to be on the $PATH.
include_apm = not options.no_atom
atom.add_node_executables_to_path(parser, include_apm)

if options.verbose:
    logging.getLogger().setLevel(logging.DEBUG)

# Run pre-setup actions.
if fb_pre_setup:
    logging.info('Running development pre-setup scripts...')
    fb_pre_setup()
    logging.info('Development pre-setup scripts executed.')

# Install packages.
if options.no_atom:
    logging.info('Running "npm install" for %s...', NUCLIDE_PATH)
    install_cmd = ['npm', 'install']
else:
    logging.info('Running "apm install" for %s...', NUCLIDE_PATH)
    install_cmd = ['apm', 'install']

if options.production:
    install_cmd.append('--production')

if options.verbose:
    install_cmd.append('--verbose')

start_install = datetime.now()
subprocess.check_call(install_cmd, cwd=NUCLIDE_PATH)
logging.info('"%s install" took %s seconds.',
             install_cmd[0], (datetime.now() - start_install).seconds)
