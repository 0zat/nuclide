function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _nuclideFeatureConfig = require('../../nuclide-feature-config');

var _nuclideFeatureConfig2 = _interopRequireDefault(_nuclideFeatureConfig);

var _nuclideClient = require('../../nuclide-client');

var _nuclideAnalytics = require('../../nuclide-analytics');

var _constants = require('./constants');

var invariant = require('assert');

var _require = require('atom');

var CompositeDisposable = _require.CompositeDisposable;

var GRAMMARS_STRING = _constants.JS_GRAMMARS.join(', ');
var diagnosticsOnFlySetting = 'nuclide-flow.diagnosticsOnFly';

var PACKAGE_NAME = 'nuclide-flow';

var busySignalProvider = undefined;

var flowDiagnosticsProvider = undefined;

var disposables = undefined;

module.exports = {
  activate: function activate() {
    if (!disposables) {
      disposables = new CompositeDisposable();

      var _require2 = require('./FlowServiceWatcher');

      var FlowServiceWatcher = _require2.FlowServiceWatcher;

      var watcher = new FlowServiceWatcher();
      disposables.add(watcher);

      disposables.add(atom.commands.add(atom.views.getView(atom.workspace), 'nuclide-flow:restart-flow-server', allowFlowServerRestart));

      var _require3 = require('../../nuclide-atom-helpers');

      var registerGrammarForFileExtension = _require3.registerGrammarForFileExtension;

      registerGrammarForFileExtension('source.ini', '.flowconfig');
    }
  },

  /** Provider for autocomplete service. */
  createAutocompleteProvider: function createAutocompleteProvider() {
    var AutocompleteProvider = require('./FlowAutocompleteProvider');
    var autocompleteProvider = new AutocompleteProvider();
    var getSuggestions = autocompleteProvider.getSuggestions.bind(autocompleteProvider);
    return {
      selector: _constants.JS_GRAMMARS.map(function (grammar) {
        return '.' + grammar;
      }).join(', '),
      disableForSelector: '.source.js .comment',
      inclusionPriority: 1,
      // We want to get ranked higher than the snippets provider.
      suggestionPriority: 5,
      onDidInsertSuggestion: function onDidInsertSuggestion() {
        (0, _nuclideAnalytics.track)('nuclide-flow.autocomplete-chosen');
      },
      getSuggestions: getSuggestions
    };
  },

  getHyperclickProvider: function getHyperclickProvider() {
    var FlowHyperclickProvider = require('./FlowHyperclickProvider');
    var flowHyperclickProvider = new FlowHyperclickProvider();
    var getSuggestionForWord = flowHyperclickProvider.getSuggestionForWord.bind(flowHyperclickProvider);
    return {
      wordRegExp: _constants.JAVASCRIPT_WORD_REGEX,
      priority: 20,
      providerName: PACKAGE_NAME,
      getSuggestionForWord: getSuggestionForWord
    };
  },

  provideBusySignal: function provideBusySignal() {
    if (!busySignalProvider) {
      var _require4 = require('../../nuclide-busy-signal-provider-base');

      var DedupedBusySignalProviderBase = _require4.DedupedBusySignalProviderBase;

      busySignalProvider = new DedupedBusySignalProviderBase();
    }
    return busySignalProvider;
  },

  provideDiagnostics: function provideDiagnostics() {
    if (!flowDiagnosticsProvider) {
      var busyProvider = this.provideBusySignal();
      var FlowDiagnosticsProvider = require('./FlowDiagnosticsProvider');
      var runOnTheFly = _nuclideFeatureConfig2['default'].get(diagnosticsOnFlySetting);
      flowDiagnosticsProvider = new FlowDiagnosticsProvider(runOnTheFly, busyProvider);
      invariant(disposables);
      disposables.add(_nuclideFeatureConfig2['default'].observe(diagnosticsOnFlySetting, function (newValue) {
        invariant(flowDiagnosticsProvider);
        flowDiagnosticsProvider.setRunOnTheFly(newValue);
      }));

      var _require5 = require('../../nuclide-atom-helpers');

      var projects = _require5.projects;

      disposables.add(projects.onDidRemoveProjectPath(function (projectPath) {
        invariant(flowDiagnosticsProvider);
        flowDiagnosticsProvider.invalidateProjectPath(projectPath);
      }));
    }
    return flowDiagnosticsProvider;
  },

  provideOutlines: function provideOutlines() {
    var _require6 = require('./FlowOutlineProvider');

    var FlowOutlineProvider = _require6.FlowOutlineProvider;

    var provider = new FlowOutlineProvider();
    return {
      grammarScopes: _constants.JS_GRAMMARS,
      priority: 1,
      name: 'Flow',
      getOutline: provider.getOutline.bind(provider)
    };
  },

  createTypeHintProvider: function createTypeHintProvider() {
    var _require7 = require('./FlowTypeHintProvider');

    var FlowTypeHintProvider = _require7.FlowTypeHintProvider;

    var flowTypeHintProvider = new FlowTypeHintProvider();
    var typeHint = flowTypeHintProvider.typeHint.bind(flowTypeHintProvider);
    return {
      selector: GRAMMARS_STRING,
      providerName: PACKAGE_NAME,
      inclusionPriority: 1,
      typeHint: typeHint
    };
  },

  createEvaluationExpressionProvider: function createEvaluationExpressionProvider() {
    var _require8 = require('./FlowEvaluationExpressionProvider');

    var FlowEvaluationExpressionProvider = _require8.FlowEvaluationExpressionProvider;

    var evaluationExpressionProvider = new FlowEvaluationExpressionProvider();
    var getEvaluationExpression = evaluationExpressionProvider.getEvaluationExpression.bind(evaluationExpressionProvider);
    return {
      selector: GRAMMARS_STRING,
      name: PACKAGE_NAME,
      getEvaluationExpression: getEvaluationExpression
    };
  },

  deactivate: function deactivate() {
    // TODO(mbolin): Find a way to unregister the autocomplete provider from
    // ServiceHub, or set a boolean in the autocomplete provider to always return
    // empty results.
    var service = (0, _nuclideClient.getServiceByNuclideUri)('FlowService');
    invariant(service);
    service.dispose();
    if (disposables) {
      disposables.dispose();
      disposables = null;
    }
    if (flowDiagnosticsProvider) {
      flowDiagnosticsProvider.dispose();
      flowDiagnosticsProvider = null;
    }
  }
};

function allowFlowServerRestart() {
  var _require9 = require('./FlowServiceFactory');

  var getCurrentServiceInstances = _require9.getCurrentServiceInstances;

  for (var service of getCurrentServiceInstances()) {
    service.allowServerRestart();
  }
}
//# sourceMappingURL=data:application/json;base64,