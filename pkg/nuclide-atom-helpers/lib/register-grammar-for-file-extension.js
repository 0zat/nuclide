

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var invariant = require('assert');

/**
 * Utility to make it easier to register a file extension with a grammar,
 * overwriting existing registrations or adding duplicates. The
 * "core.customFileTypes" config was added in Atom v1.0.8.
 * https://github.com/atom/atom/releases/tag/v1.0.8
 *
 * Note on periods: Using the extension "cats" will match the files "file.cats"
 *   and "cats". The extension ".cats" will match a file named ".cats".
 *
 * @param scopeName for the grammar, such as "source.js" or "source.python"
 * @param extension when a file is opened that ends with this extension, its
 *   grammar will be updated to match that of the specified scopeName, if
 *   the grammar is available.
 * @return whether the extension was registered or not.
 */
function registerGrammarForFileExtension(scopeName, extension) {
  var customFileTypes = atom.config.get('core.customFileTypes');
  if (!customFileTypes || typeof customFileTypes !== 'object') {
    customFileTypes = {};
  }
  invariant(customFileTypes);
  var customFileType = customFileTypes[scopeName];
  if (!Array.isArray(customFileType)) {
    customFileType = [];
  }
  if (customFileType.indexOf(extension) === -1) {
    customFileTypes[scopeName] = customFileType.concat(extension);
    atom.config.set('core.customFileTypes', customFileTypes);
    return true;
  }
  return false;
}

module.exports = registerGrammarForFileExtension;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZ2lzdGVyLWdyYW1tYXItZm9yLWZpbGUtZXh0ZW5zaW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFXQSxJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJwQyxTQUFTLCtCQUErQixDQUN0QyxTQUFpQixFQUNqQixTQUFpQixFQUNSO0FBQ1QsTUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUM5RCxNQUFJLENBQUMsZUFBZSxJQUFJLE9BQU8sZUFBZSxLQUFLLFFBQVEsRUFBRTtBQUMzRCxtQkFBZSxHQUFHLEVBQUUsQ0FBQztHQUN0QjtBQUNELFdBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUMzQixNQUFJLGNBQWMsR0FBRyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDaEQsTUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEVBQUU7QUFDbEMsa0JBQWMsR0FBRyxFQUFFLENBQUM7R0FDckI7QUFDRCxNQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDNUMsbUJBQWUsQ0FBQyxTQUFTLENBQUMsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzlELFFBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHNCQUFzQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ3pELFdBQU8sSUFBSSxDQUFDO0dBQ2I7QUFDRCxTQUFPLEtBQUssQ0FBQztDQUNkOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsK0JBQStCLENBQUMiLCJmaWxlIjoicmVnaXN0ZXItZ3JhbW1hci1mb3ItZmlsZS1leHRlbnNpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcblxuLyoqXG4gKiBVdGlsaXR5IHRvIG1ha2UgaXQgZWFzaWVyIHRvIHJlZ2lzdGVyIGEgZmlsZSBleHRlbnNpb24gd2l0aCBhIGdyYW1tYXIsXG4gKiBvdmVyd3JpdGluZyBleGlzdGluZyByZWdpc3RyYXRpb25zIG9yIGFkZGluZyBkdXBsaWNhdGVzLiBUaGVcbiAqIFwiY29yZS5jdXN0b21GaWxlVHlwZXNcIiBjb25maWcgd2FzIGFkZGVkIGluIEF0b20gdjEuMC44LlxuICogaHR0cHM6Ly9naXRodWIuY29tL2F0b20vYXRvbS9yZWxlYXNlcy90YWcvdjEuMC44XG4gKlxuICogTm90ZSBvbiBwZXJpb2RzOiBVc2luZyB0aGUgZXh0ZW5zaW9uIFwiY2F0c1wiIHdpbGwgbWF0Y2ggdGhlIGZpbGVzIFwiZmlsZS5jYXRzXCJcbiAqICAgYW5kIFwiY2F0c1wiLiBUaGUgZXh0ZW5zaW9uIFwiLmNhdHNcIiB3aWxsIG1hdGNoIGEgZmlsZSBuYW1lZCBcIi5jYXRzXCIuXG4gKlxuICogQHBhcmFtIHNjb3BlTmFtZSBmb3IgdGhlIGdyYW1tYXIsIHN1Y2ggYXMgXCJzb3VyY2UuanNcIiBvciBcInNvdXJjZS5weXRob25cIlxuICogQHBhcmFtIGV4dGVuc2lvbiB3aGVuIGEgZmlsZSBpcyBvcGVuZWQgdGhhdCBlbmRzIHdpdGggdGhpcyBleHRlbnNpb24sIGl0c1xuICogICBncmFtbWFyIHdpbGwgYmUgdXBkYXRlZCB0byBtYXRjaCB0aGF0IG9mIHRoZSBzcGVjaWZpZWQgc2NvcGVOYW1lLCBpZlxuICogICB0aGUgZ3JhbW1hciBpcyBhdmFpbGFibGUuXG4gKiBAcmV0dXJuIHdoZXRoZXIgdGhlIGV4dGVuc2lvbiB3YXMgcmVnaXN0ZXJlZCBvciBub3QuXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyR3JhbW1hckZvckZpbGVFeHRlbnNpb24oXG4gIHNjb3BlTmFtZTogc3RyaW5nLFxuICBleHRlbnNpb246IHN0cmluZyxcbik6IGJvb2xlYW4ge1xuICBsZXQgY3VzdG9tRmlsZVR5cGVzID0gYXRvbS5jb25maWcuZ2V0KCdjb3JlLmN1c3RvbUZpbGVUeXBlcycpO1xuICBpZiAoIWN1c3RvbUZpbGVUeXBlcyB8fCB0eXBlb2YgY3VzdG9tRmlsZVR5cGVzICE9PSAnb2JqZWN0Jykge1xuICAgIGN1c3RvbUZpbGVUeXBlcyA9IHt9O1xuICB9XG4gIGludmFyaWFudChjdXN0b21GaWxlVHlwZXMpO1xuICBsZXQgY3VzdG9tRmlsZVR5cGUgPSBjdXN0b21GaWxlVHlwZXNbc2NvcGVOYW1lXTtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGN1c3RvbUZpbGVUeXBlKSkge1xuICAgIGN1c3RvbUZpbGVUeXBlID0gW107XG4gIH1cbiAgaWYgKGN1c3RvbUZpbGVUeXBlLmluZGV4T2YoZXh0ZW5zaW9uKSA9PT0gLTEpIHtcbiAgICBjdXN0b21GaWxlVHlwZXNbc2NvcGVOYW1lXSA9IGN1c3RvbUZpbGVUeXBlLmNvbmNhdChleHRlbnNpb24pO1xuICAgIGF0b20uY29uZmlnLnNldCgnY29yZS5jdXN0b21GaWxlVHlwZXMnLCBjdXN0b21GaWxlVHlwZXMpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZWdpc3RlckdyYW1tYXJGb3JGaWxlRXh0ZW5zaW9uO1xuIl19