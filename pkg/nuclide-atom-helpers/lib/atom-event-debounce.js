

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * Often, we may want to respond to Atom events, but only after a buffer period
 * of no change.
 * For example, Atom provides Workspace::onDidChangeActivePaneItem, but we may
 * want to know not when the active pane item has changed, buth when it has
 * stopped changing.
 * This file provides methods to do this.
 */

var _require = require('../../nuclide-commons');

var debounce = _require.debounce;

var DEFAULT_DEBOUNCE_INTERVAL_MS = 100;

/**
 * Similar to Atom's Workspace::onDidChangeActivePaneItem
 * (https://atom.io/docs/api/v1.0.2/Workspace#instance-onDidChangeActivePaneItem),
 * with the addition of a debounce interval.
 * @param debounceInterval The number of milliseconds to debounce.
 */
function onWorkspaceDidStopChangingActivePaneItem(callback) {
  var debounceInterval = arguments.length <= 1 || arguments[1] === undefined ? DEFAULT_DEBOUNCE_INTERVAL_MS : arguments[1];

  var debouncedFunction = debounce(callback, debounceInterval, /* immediate */false);
  return atom.workspace.onDidChangeActivePaneItem(debouncedFunction);
}

module.exports = {
  onWorkspaceDidStopChangingActivePaneItem: onWorkspaceDidStopChangingActivePaneItem
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF0b20tZXZlbnQtZGVib3VuY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQW9CbUIsT0FBTyxDQUFDLHVCQUF1QixDQUFDOztJQUE1QyxRQUFRLFlBQVIsUUFBUTs7QUFFZixJQUFNLDRCQUE0QixHQUFHLEdBQUcsQ0FBQzs7Ozs7Ozs7QUFRekMsU0FBUyx3Q0FBd0MsQ0FDN0MsUUFBOEIsRUFFakI7TUFEYixnQkFBd0IseURBQUcsNEJBQTRCOztBQUV6RCxNQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLGlCQUFrQixLQUFLLENBQUMsQ0FBQztBQUN0RixTQUFPLElBQUksQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUNwRTs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsMENBQXdDLEVBQXhDLHdDQUF3QztDQUN6QyxDQUFDIiwiZmlsZSI6ImF0b20tZXZlbnQtZGVib3VuY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKipcbiAqIE9mdGVuLCB3ZSBtYXkgd2FudCB0byByZXNwb25kIHRvIEF0b20gZXZlbnRzLCBidXQgb25seSBhZnRlciBhIGJ1ZmZlciBwZXJpb2RcbiAqIG9mIG5vIGNoYW5nZS5cbiAqIEZvciBleGFtcGxlLCBBdG9tIHByb3ZpZGVzIFdvcmtzcGFjZTo6b25EaWRDaGFuZ2VBY3RpdmVQYW5lSXRlbSwgYnV0IHdlIG1heVxuICogd2FudCB0byBrbm93IG5vdCB3aGVuIHRoZSBhY3RpdmUgcGFuZSBpdGVtIGhhcyBjaGFuZ2VkLCBidXRoIHdoZW4gaXQgaGFzXG4gKiBzdG9wcGVkIGNoYW5naW5nLlxuICogVGhpcyBmaWxlIHByb3ZpZGVzIG1ldGhvZHMgdG8gZG8gdGhpcy5cbiAqL1xuXG5jb25zdCB7ZGVib3VuY2V9ID0gcmVxdWlyZSgnLi4vLi4vbnVjbGlkZS1jb21tb25zJyk7XG5cbmNvbnN0IERFRkFVTFRfREVCT1VOQ0VfSU5URVJWQUxfTVMgPSAxMDA7XG5cbi8qKlxuICogU2ltaWxhciB0byBBdG9tJ3MgV29ya3NwYWNlOjpvbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtXG4gKiAoaHR0cHM6Ly9hdG9tLmlvL2RvY3MvYXBpL3YxLjAuMi9Xb3Jrc3BhY2UjaW5zdGFuY2Utb25EaWRDaGFuZ2VBY3RpdmVQYW5lSXRlbSksXG4gKiB3aXRoIHRoZSBhZGRpdGlvbiBvZiBhIGRlYm91bmNlIGludGVydmFsLlxuICogQHBhcmFtIGRlYm91bmNlSW50ZXJ2YWwgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVib3VuY2UuXG4gKi9cbmZ1bmN0aW9uIG9uV29ya3NwYWNlRGlkU3RvcENoYW5naW5nQWN0aXZlUGFuZUl0ZW0oXG4gICAgY2FsbGJhY2s6IChpdGVtOiBtaXhlZCkgPT4gYW55LFxuICAgIGRlYm91bmNlSW50ZXJ2YWw6IG51bWJlciA9IERFRkFVTFRfREVCT1VOQ0VfSU5URVJWQUxfTVNcbiAgKTogSURpc3Bvc2FibGUge1xuICBjb25zdCBkZWJvdW5jZWRGdW5jdGlvbiA9IGRlYm91bmNlKGNhbGxiYWNrLCBkZWJvdW5jZUludGVydmFsLCAvKiBpbW1lZGlhdGUgKi8gZmFsc2UpO1xuICByZXR1cm4gYXRvbS53b3Jrc3BhY2Uub25EaWRDaGFuZ2VBY3RpdmVQYW5lSXRlbShkZWJvdW5jZWRGdW5jdGlvbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBvbldvcmtzcGFjZURpZFN0b3BDaGFuZ2luZ0FjdGl2ZVBhbmVJdGVtLFxufTtcbiJdfQ==