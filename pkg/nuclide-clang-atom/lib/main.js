function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _atom = require('atom');

var _nuclideCommons = require('../../nuclide-commons');

var _constants = require('./constants');

var busySignalProvider = null;
var diagnosticProvider = null;
var subscriptions = null;

function getBusySignalProvider() {
  if (!busySignalProvider) {
    var _require = require('../../nuclide-busy-signal-provider-base');

    var BusySignalProviderBase = _require.BusySignalProviderBase;

    busySignalProvider = new BusySignalProviderBase();
  }
  return busySignalProvider;
}

function getDiagnosticsProvider() {
  if (!diagnosticProvider) {
    var provider = require('./ClangDiagnosticsProvider');
    diagnosticProvider = new provider(getBusySignalProvider());
  }
  return diagnosticProvider;
}

module.exports = {
  activate: function activate() {
    subscriptions = new _atom.CompositeDisposable();
    // Provide a 'Clean and rebuild' command to restart the Clang server for the current file
    // and reset all compilation flags. Useful when BUCK targets or headers change,
    // since those are heavily cached for performance. Also great for testing!
    subscriptions.add(atom.commands.add('atom-workspace', 'nuclide-clang:clean-and-rebuild', _asyncToGenerator(function* () {
      var editor = atom.workspace.getActiveTextEditor();
      if (editor == null) {
        return;
      }
      var path = editor.getPath();
      if (path == null) {
        return;
      }

      var _require2 = require('./libclang');

      var reset = _require2.reset;

      yield reset(editor);
      if (diagnosticProvider != null) {
        diagnosticProvider.invalidateBuffer(editor.getBuffer());
        diagnosticProvider.runDiagnostics(editor);
      }
    })));
  },

  /** Provider for autocomplete service. */
  createAutocompleteProvider: function createAutocompleteProvider() {
    var _require3 = require('./AutocompleteProvider');

    var AutocompleteProvider = _require3.AutocompleteProvider;

    var autocompleteProvider = new AutocompleteProvider();
    var getSuggestions = autocompleteProvider.getAutocompleteSuggestions.bind(autocompleteProvider);

    return {
      selector: '.source.objc, .source.objcpp, .source.cpp, .source.c',
      inclusionPriority: 1,
      suggestionPriority: 5, // Higher than the snippets provider.
      getSuggestions: getSuggestions
    };
  },

  createTypeHintProvider: function createTypeHintProvider() {
    var _require4 = require('./TypeHintProvider');

    var TypeHintProvider = _require4.TypeHintProvider;

    var typeHintProvider = new TypeHintProvider();
    var typeHint = typeHintProvider.typeHint.bind(typeHintProvider);

    return {
      inclusionPriority: 1,
      providerName: _constants.PACKAGE_NAME,
      selector: _nuclideCommons.array.from(_constants.GRAMMAR_SET).join(', '),
      typeHint: typeHint
    };
  },

  getHyperclickProvider: function getHyperclickProvider() {
    return require('./HyperclickProvider');
  },

  provideBusySignal: function provideBusySignal() {
    return getBusySignalProvider();
  },

  provideCodeFormat: function provideCodeFormat() {
    return require('./CodeFormatProvider');
  },

  provideDiagnostics: function provideDiagnostics() {
    return getDiagnosticsProvider();
  },

  deactivate: function deactivate() {
    if (diagnosticProvider != null) {
      diagnosticProvider.dispose();
      diagnosticProvider = null;
    }
    if (subscriptions != null) {
      subscriptions.dispose();
      subscriptions = null;
    }
  }
};
//# sourceMappingURL=data:application/json;base64,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QUksQ0FBQyxJQUFJLENBQUM7QUFDNUMsY0FBUSxFQUFSLFFBQVE7S0FDVCxDQUFDO0dBQ0g7O0FBRUQsdUJBQXFCLEVBQUEsaUNBQXVCO0FBQzFDLFdBQU8sT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7R0FDeEM7O0FBRUQsbUJBQWlCLEVBQUEsNkJBQStCO0FBQzlDLFdBQU8scUJBQXFCLEVBQUUsQ0FBQztHQUNoQzs7QUFFRCxtQkFBaUIsRUFBQSw2QkFBdUI7QUFDdEMsV0FBTyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztHQUN4Qzs7QUFFRCxvQkFBa0IsRUFBQSw4QkFBdUI7QUFDdkMsV0FBTyxzQkFBc0IsRUFBRSxDQUFDO0dBQ2pDOztBQUVELFlBQVUsRUFBQSxzQkFBRztBQUNYLFFBQUksa0JBQWtCLElBQUksSUFBSSxFQUFFO0FBQzlCLHdCQUFrQixDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQzdCLHdCQUFrQixHQUFHLElBQUksQ0FBQztLQUMzQjtBQUNELFFBQUksYUFBYSxJQUFJLElBQUksRUFBRTtBQUN6QixtQkFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3hCLG1CQUFhLEdBQUcsSUFBSSxDQUFDO0tBQ3RCO0dBQ0Y7Q0FDRixDQUFDIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgdHlwZSB7SHlwZXJjbGlja1Byb3ZpZGVyfSBmcm9tICcuLi8uLi9oeXBlcmNsaWNrLWludGVyZmFjZXMnO1xuaW1wb3J0IHR5cGUge1R5cGVIaW50UHJvdmlkZXIgYXMgVHlwZUhpbnRQcm92aWRlclR5cGV9IGZyb20gJy4uLy4uL251Y2xpZGUtdHlwZS1oaW50LWludGVyZmFjZXMnO1xuaW1wb3J0IHR5cGUge1xuICBCdXN5U2lnbmFsUHJvdmlkZXJCYXNlIGFzIEJ1c3lTaWduYWxQcm92aWRlckJhc2VUeXBlLFxufSBmcm9tICcuLi8uLi9udWNsaWRlLWJ1c3ktc2lnbmFsLXByb3ZpZGVyLWJhc2UnO1xuaW1wb3J0IHR5cGUge0RpYWdub3N0aWNQcm92aWRlcn0gZnJvbSAnLi4vLi4vbnVjbGlkZS1kaWFnbm9zdGljcy1iYXNlJztcbmltcG9ydCB0eXBlIHtDb2RlRm9ybWF0UHJvdmlkZXJ9IGZyb20gJy4uLy4uL251Y2xpZGUtY29kZS1mb3JtYXQvbGliL3R5cGVzJztcbmltcG9ydCB0eXBlIENsYW5nRGlhZ25vc3RpY3NQcm92aWRlciBmcm9tICcuL0NsYW5nRGlhZ25vc3RpY3NQcm92aWRlcic7XG5cbmltcG9ydCB7Q29tcG9zaXRlRGlzcG9zYWJsZX0gZnJvbSAnYXRvbSc7XG5pbXBvcnQge2FycmF5fSBmcm9tICcuLi8uLi9udWNsaWRlLWNvbW1vbnMnO1xuaW1wb3J0IHtHUkFNTUFSX1NFVCwgUEFDS0FHRV9OQU1FfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmxldCBidXN5U2lnbmFsUHJvdmlkZXI6ID9CdXN5U2lnbmFsUHJvdmlkZXJCYXNlVHlwZSA9IG51bGw7XG5sZXQgZGlhZ25vc3RpY1Byb3ZpZGVyOiA/Q2xhbmdEaWFnbm9zdGljc1Byb3ZpZGVyID0gbnVsbDtcbmxldCBzdWJzY3JpcHRpb25zOiA/Q29tcG9zaXRlRGlzcG9zYWJsZSA9IG51bGw7XG5cbmZ1bmN0aW9uIGdldEJ1c3lTaWduYWxQcm92aWRlcigpOiBCdXN5U2lnbmFsUHJvdmlkZXJCYXNlVHlwZSB7XG4gIGlmICghYnVzeVNpZ25hbFByb3ZpZGVyKSB7XG4gICAgY29uc3Qge0J1c3lTaWduYWxQcm92aWRlckJhc2V9ID0gcmVxdWlyZSgnLi4vLi4vbnVjbGlkZS1idXN5LXNpZ25hbC1wcm92aWRlci1iYXNlJyk7XG4gICAgYnVzeVNpZ25hbFByb3ZpZGVyID0gbmV3IEJ1c3lTaWduYWxQcm92aWRlckJhc2UoKTtcbiAgfVxuICByZXR1cm4gYnVzeVNpZ25hbFByb3ZpZGVyO1xufVxuXG5mdW5jdGlvbiBnZXREaWFnbm9zdGljc1Byb3ZpZGVyKCk6IENsYW5nRGlhZ25vc3RpY3NQcm92aWRlciB7XG4gIGlmICghZGlhZ25vc3RpY1Byb3ZpZGVyKSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSByZXF1aXJlKCcuL0NsYW5nRGlhZ25vc3RpY3NQcm92aWRlcicpO1xuICAgIGRpYWdub3N0aWNQcm92aWRlciA9IG5ldyBwcm92aWRlcihnZXRCdXN5U2lnbmFsUHJvdmlkZXIoKSk7XG4gIH1cbiAgcmV0dXJuIGRpYWdub3N0aWNQcm92aWRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFjdGl2YXRlKCkge1xuICAgIHN1YnNjcmlwdGlvbnMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xuICAgIC8vIFByb3ZpZGUgYSAnQ2xlYW4gYW5kIHJlYnVpbGQnIGNvbW1hbmQgdG8gcmVzdGFydCB0aGUgQ2xhbmcgc2VydmVyIGZvciB0aGUgY3VycmVudCBmaWxlXG4gICAgLy8gYW5kIHJlc2V0IGFsbCBjb21waWxhdGlvbiBmbGFncy4gVXNlZnVsIHdoZW4gQlVDSyB0YXJnZXRzIG9yIGhlYWRlcnMgY2hhbmdlLFxuICAgIC8vIHNpbmNlIHRob3NlIGFyZSBoZWF2aWx5IGNhY2hlZCBmb3IgcGVyZm9ybWFuY2UuIEFsc28gZ3JlYXQgZm9yIHRlc3RpbmchXG4gICAgc3Vic2NyaXB0aW9ucy5hZGQoXG4gICAgICBhdG9tLmNvbW1hbmRzLmFkZCgnYXRvbS13b3Jrc3BhY2UnLCAnbnVjbGlkZS1jbGFuZzpjbGVhbi1hbmQtcmVidWlsZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgZWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpO1xuICAgICAgICBpZiAoZWRpdG9yID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF0aCA9IGVkaXRvci5nZXRQYXRoKCk7XG4gICAgICAgIGlmIChwYXRoID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qge3Jlc2V0fSA9IHJlcXVpcmUoJy4vbGliY2xhbmcnKTtcbiAgICAgICAgYXdhaXQgcmVzZXQoZWRpdG9yKTtcbiAgICAgICAgaWYgKGRpYWdub3N0aWNQcm92aWRlciAhPSBudWxsKSB7XG4gICAgICAgICAgZGlhZ25vc3RpY1Byb3ZpZGVyLmludmFsaWRhdGVCdWZmZXIoZWRpdG9yLmdldEJ1ZmZlcigpKTtcbiAgICAgICAgICBkaWFnbm9zdGljUHJvdmlkZXIucnVuRGlhZ25vc3RpY3MoZWRpdG9yKTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgKTtcbiAgfSxcblxuICAvKiogUHJvdmlkZXIgZm9yIGF1dG9jb21wbGV0ZSBzZXJ2aWNlLiAqL1xuICBjcmVhdGVBdXRvY29tcGxldGVQcm92aWRlcigpOiBhdG9tJEF1dG9jb21wbGV0ZVByb3ZpZGVyIHtcbiAgICBjb25zdCB7QXV0b2NvbXBsZXRlUHJvdmlkZXJ9ID0gcmVxdWlyZSgnLi9BdXRvY29tcGxldGVQcm92aWRlcicpO1xuICAgIGNvbnN0IGF1dG9jb21wbGV0ZVByb3ZpZGVyID0gbmV3IEF1dG9jb21wbGV0ZVByb3ZpZGVyKCk7XG4gICAgY29uc3QgZ2V0U3VnZ2VzdGlvbnMgPSBhdXRvY29tcGxldGVQcm92aWRlci5nZXRBdXRvY29tcGxldGVTdWdnZXN0aW9uc1xuICAgICAgLmJpbmQoYXV0b2NvbXBsZXRlUHJvdmlkZXIpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbGVjdG9yOiAnLnNvdXJjZS5vYmpjLCAuc291cmNlLm9iamNwcCwgLnNvdXJjZS5jcHAsIC5zb3VyY2UuYycsXG4gICAgICBpbmNsdXNpb25Qcmlvcml0eTogMSxcbiAgICAgIHN1Z2dlc3Rpb25Qcmlvcml0eTogNSwgIC8vIEhpZ2hlciB0aGFuIHRoZSBzbmlwcGV0cyBwcm92aWRlci5cbiAgICAgIGdldFN1Z2dlc3Rpb25zLFxuICAgIH07XG4gIH0sXG5cbiAgY3JlYXRlVHlwZUhpbnRQcm92aWRlcigpOiBUeXBlSGludFByb3ZpZGVyVHlwZSB7XG4gICAgY29uc3Qge1R5cGVIaW50UHJvdmlkZXJ9ID0gcmVxdWlyZSgnLi9UeXBlSGludFByb3ZpZGVyJyk7XG4gICAgY29uc3QgdHlwZUhpbnRQcm92aWRlciA9IG5ldyBUeXBlSGludFByb3ZpZGVyKCk7XG4gICAgY29uc3QgdHlwZUhpbnQgPSB0eXBlSGludFByb3ZpZGVyLnR5cGVIaW50LmJpbmQodHlwZUhpbnRQcm92aWRlcik7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaW5jbHVzaW9uUHJpb3JpdHk6IDEsXG4gICAgICBwcm92aWRlck5hbWU6IFBBQ0tBR0VfTkFNRSxcbiAgICAgIHNlbGVjdG9yOiBhcnJheS5mcm9tKEdSQU1NQVJfU0VUKS5qb2luKCcsICcpLFxuICAgICAgdHlwZUhpbnQsXG4gICAgfTtcbiAgfSxcblxuICBnZXRIeXBlcmNsaWNrUHJvdmlkZXIoKTogSHlwZXJjbGlja1Byb3ZpZGVyIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9IeXBlcmNsaWNrUHJvdmlkZXInKTtcbiAgfSxcblxuICBwcm92aWRlQnVzeVNpZ25hbCgpOiBCdXN5U2lnbmFsUHJvdmlkZXJCYXNlVHlwZSB7XG4gICAgcmV0dXJuIGdldEJ1c3lTaWduYWxQcm92aWRlcigpO1xuICB9LFxuXG4gIHByb3ZpZGVDb2RlRm9ybWF0KCk6IENvZGVGb3JtYXRQcm92aWRlciB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vQ29kZUZvcm1hdFByb3ZpZGVyJyk7XG4gIH0sXG5cbiAgcHJvdmlkZURpYWdub3N0aWNzKCk6IERpYWdub3N0aWNQcm92aWRlciB7XG4gICAgcmV0dXJuIGdldERpYWdub3N0aWNzUHJvdmlkZXIoKTtcbiAgfSxcblxuICBkZWFjdGl2YXRlKCkge1xuICAgIGlmIChkaWFnbm9zdGljUHJvdmlkZXIgIT0gbnVsbCkge1xuICAgICAgZGlhZ25vc3RpY1Byb3ZpZGVyLmRpc3Bvc2UoKTtcbiAgICAgIGRpYWdub3N0aWNQcm92aWRlciA9IG51bGw7XG4gICAgfVxuICAgIGlmIChzdWJzY3JpcHRpb25zICE9IG51bGwpIHtcbiAgICAgIHN1YnNjcmlwdGlvbnMuZGlzcG9zZSgpO1xuICAgICAgc3Vic2NyaXB0aW9ucyA9IG51bGw7XG4gICAgfVxuICB9LFxufTtcbiJdfQ==