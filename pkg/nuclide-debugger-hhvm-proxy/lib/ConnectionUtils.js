Object.defineProperty(exports, '__esModule', {
  value: true
});

var getHackRoot = _asyncToGenerator(function* (filePath) {
  return yield (0, _nuclideCommons.findNearestFile)('.hhconfig', filePath);
});

var setRootDirectoryUri = _asyncToGenerator(function* (directoryUri) {
  var hackRootDirectory = yield getHackRoot(directoryUri);
  _utils2['default'].log('setRootDirectoryUri: from ' + directoryUri + ' to ' + hackRootDirectory);
  // TODO: make xdebug_includes.php path configurable from hhconfig.
  var hackDummyRequestFilePath = _path2['default'].join(hackRootDirectory ? hackRootDirectory : '', '/scripts/xdebug_includes.php');

  // Use hackDummyRequestFilePath if possible.
  if (yield _nuclideCommons.fsPromise.exists(hackDummyRequestFilePath)) {
    dummyRequestFilePath = hackDummyRequestFilePath;
  }
});

exports.setRootDirectoryUri = setRootDirectoryUri;
exports.sendDummyRequest = sendDummyRequest;
exports.isDummyConnection = isDummyConnection;
exports.failConnection = failConnection;
exports.isCorrectConnection = isCorrectConnection;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _config = require('./config');

var _helpers = require('./helpers');

var _nuclideCommons = require('../../nuclide-commons');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var dummyRequestFilePath = 'php_only_xdebug_request.php';

function sendDummyRequest() {
  return (0, _helpers.launchScriptForDummyConnection)(dummyRequestFilePath);
}

function isDummyConnection(message) {
  var attributes = message.init.$;
  return attributes.fileuri.endsWith(dummyRequestFilePath);
}

function failConnection(socket, errorMessage) {
  _utils2['default'].log(errorMessage);
  socket.end();
  socket.destroy();
}

function isCorrectConnection(message) {
  var _getConfig = (0, _config.getConfig)();

  var pid = _getConfig.pid;
  var idekeyRegex = _getConfig.idekeyRegex;
  var scriptRegex = _getConfig.scriptRegex;

  if (!message || !message.init || !message.init.$) {
    _utils2['default'].logError('Incorrect init');
    return false;
  }

  var init = message.init;
  if (!init.engine || !init.engine || !init.engine[0] || init.engine[0]._ !== 'xdebug') {
    _utils2['default'].logError('Incorrect engine');
    return false;
  }

  var attributes = init.$;
  if (attributes.xmlns !== 'urn:debugger_protocol_v1' || attributes['xmlns:xdebug'] !== 'http://xdebug.org/dbgp/xdebug' || attributes.language !== 'PHP') {
    _utils2['default'].logError('Incorrect attributes');
    return false;
  }

  return (!pid || attributes.appid === String(pid)) && (!idekeyRegex || new RegExp(idekeyRegex).test(attributes.idekey)) && (!scriptRegex || new RegExp(scriptRegex).test((0, _helpers.uriToPath)(attributes.fileuri)));
}
//# sourceMappingURL=data:application/json;base64,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QUMsV0FBVyxJQUFJLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUEsQUFBQyxLQUNoRSxDQUFDLFdBQVcsSUFBSSxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsd0JBQVUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDO0NBQ2pGIiwiZmlsZSI6IkNvbm5lY3Rpb25VdGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBsb2dnZXIgZnJvbSAnLi91dGlscyc7XG5pbXBvcnQge2dldENvbmZpZ30gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHtsYXVuY2hTY3JpcHRGb3JEdW1teUNvbm5lY3Rpb24sIHVyaVRvUGF0aH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7ZnNQcm9taXNlLCBmaW5kTmVhcmVzdEZpbGV9IGZyb20gJy4uLy4uL251Y2xpZGUtY29tbW9ucyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuaW1wb3J0IHR5cGUge1NvY2tldH0gZnJvbSAnbmV0JztcblxubGV0IGR1bW15UmVxdWVzdEZpbGVQYXRoID0gJ3BocF9vbmx5X3hkZWJ1Z19yZXF1ZXN0LnBocCc7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEhhY2tSb290KGZpbGVQYXRoOiBzdHJpbmcpOiBQcm9taXNlPD9zdHJpbmc+IHtcbiAgcmV0dXJuIGF3YWl0IGZpbmROZWFyZXN0RmlsZSgnLmhoY29uZmlnJywgZmlsZVBhdGgpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0Um9vdERpcmVjdG9yeVVyaShkaXJlY3RvcnlVcmk6IHN0cmluZyk6IFByb21pc2Uge1xuICBjb25zdCBoYWNrUm9vdERpcmVjdG9yeSA9IGF3YWl0IGdldEhhY2tSb290KGRpcmVjdG9yeVVyaSk7XG4gIGxvZ2dlci5sb2coYHNldFJvb3REaXJlY3RvcnlVcmk6IGZyb20gJHtkaXJlY3RvcnlVcml9IHRvICR7aGFja1Jvb3REaXJlY3Rvcnl9YCk7XG4gIC8vIFRPRE86IG1ha2UgeGRlYnVnX2luY2x1ZGVzLnBocCBwYXRoIGNvbmZpZ3VyYWJsZSBmcm9tIGhoY29uZmlnLlxuICBjb25zdCBoYWNrRHVtbXlSZXF1ZXN0RmlsZVBhdGggPSBwYXRoLmpvaW4oXG4gICAgKGhhY2tSb290RGlyZWN0b3J5ID8gaGFja1Jvb3REaXJlY3RvcnkgOiAnJyksXG4gICAgJy9zY3JpcHRzL3hkZWJ1Z19pbmNsdWRlcy5waHAnXG4gICk7XG5cbiAgLy8gVXNlIGhhY2tEdW1teVJlcXVlc3RGaWxlUGF0aCBpZiBwb3NzaWJsZS5cbiAgaWYgKGF3YWl0IGZzUHJvbWlzZS5leGlzdHMoaGFja0R1bW15UmVxdWVzdEZpbGVQYXRoKSkge1xuICAgIGR1bW15UmVxdWVzdEZpbGVQYXRoID0gaGFja0R1bW15UmVxdWVzdEZpbGVQYXRoO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZW5kRHVtbXlSZXF1ZXN0KCk6IGNoaWxkX3Byb2Nlc3MkQ2hpbGRQcm9jZXNzIHtcbiAgcmV0dXJuIGxhdW5jaFNjcmlwdEZvckR1bW15Q29ubmVjdGlvbihkdW1teVJlcXVlc3RGaWxlUGF0aCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0R1bW15Q29ubmVjdGlvbihtZXNzYWdlOiBPYmplY3QpOiBib29sZWFuIHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IG1lc3NhZ2UuaW5pdC4kO1xuICByZXR1cm4gYXR0cmlidXRlcy5maWxldXJpLmVuZHNXaXRoKGR1bW15UmVxdWVzdEZpbGVQYXRoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZhaWxDb25uZWN0aW9uKHNvY2tldDogU29ja2V0LCBlcnJvck1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICBsb2dnZXIubG9nKGVycm9yTWVzc2FnZSk7XG4gIHNvY2tldC5lbmQoKTtcbiAgc29ja2V0LmRlc3Ryb3koKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29ycmVjdENvbm5lY3Rpb24obWVzc2FnZTogT2JqZWN0KTogYm9vbGVhbiB7XG4gIGNvbnN0IHtwaWQsIGlkZWtleVJlZ2V4LCBzY3JpcHRSZWdleH0gPSBnZXRDb25maWcoKTtcbiAgaWYgKCFtZXNzYWdlIHx8ICFtZXNzYWdlLmluaXQgfHwgIW1lc3NhZ2UuaW5pdC4kKSB7XG4gICAgbG9nZ2VyLmxvZ0Vycm9yKCdJbmNvcnJlY3QgaW5pdCcpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGluaXQgPSBtZXNzYWdlLmluaXQ7XG4gIGlmICghaW5pdC5lbmdpbmUgfHwgIWluaXQuZW5naW5lIHx8ICFpbml0LmVuZ2luZVswXSB8fCBpbml0LmVuZ2luZVswXS5fICE9PSAneGRlYnVnJykge1xuICAgIGxvZ2dlci5sb2dFcnJvcignSW5jb3JyZWN0IGVuZ2luZScpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBpbml0LiQ7XG4gIGlmIChhdHRyaWJ1dGVzLnhtbG5zICE9PSAndXJuOmRlYnVnZ2VyX3Byb3RvY29sX3YxJ1xuICAgIHx8IGF0dHJpYnV0ZXNbJ3htbG5zOnhkZWJ1ZyddICE9PSAnaHR0cDovL3hkZWJ1Zy5vcmcvZGJncC94ZGVidWcnXG4gICAgfHwgYXR0cmlidXRlcy5sYW5ndWFnZSAhPT0gJ1BIUCcpIHtcbiAgICBsb2dnZXIubG9nRXJyb3IoJ0luY29ycmVjdCBhdHRyaWJ1dGVzJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuICghcGlkIHx8IGF0dHJpYnV0ZXMuYXBwaWQgPT09IFN0cmluZyhwaWQpKSAmJlxuICAgICghaWRla2V5UmVnZXggfHwgbmV3IFJlZ0V4cChpZGVrZXlSZWdleCkudGVzdChhdHRyaWJ1dGVzLmlkZWtleSkpICYmXG4gICAgKCFzY3JpcHRSZWdleCB8fCBuZXcgUmVnRXhwKHNjcmlwdFJlZ2V4KS50ZXN0KHVyaVRvUGF0aChhdHRyaWJ1dGVzLmZpbGV1cmkpKSk7XG59XG4iXX0=