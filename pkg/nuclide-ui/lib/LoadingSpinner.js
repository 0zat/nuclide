Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactForAtom = require('react-for-atom');

var LoadingSpinnerSizes = Object.freeze({
  EXTRA_SMALL: 'EXTRA_SMALL',
  SMALL: 'SMALL',
  MEDIUM: 'MEDIUM',
  LARGE: 'LARGE'
});

exports.LoadingSpinnerSizes = LoadingSpinnerSizes;
var LoadingSpinnerClassnames = Object.freeze({
  EXTRA_SMALL: 'loading-spinner-tiny',
  SMALL: 'loading-spinner-small',
  MEDIUM: 'loading-spinner-medium',
  LARGE: 'loading-spinner-large'
});

/**
 * Shows an indefinite, animated LoadingSpinner.
 */
/* eslint-disable react/prop-types */
var LoadingSpinner = function LoadingSpinner(props) {
  var className = props.className;
  var size = props.size;

  var safeSize = size != null && LoadingSpinnerSizes.hasOwnProperty(size) ? size : LoadingSpinnerSizes.MEDIUM;
  var sizeClassname = LoadingSpinnerClassnames[safeSize];
  var newClassName = (0, _classnames2['default'])(className, 'loading', sizeClassname);
  return _reactForAtom.React.createElement('div', { className: newClassName });
};
exports.LoadingSpinner = LoadingSpinner;

/** The size of the LoadingSpinner. Defaults to MEDIUM. */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxvYWRpbmdTcGlubmVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OzBCQVd1QixZQUFZOzs7OzRCQUNmLGdCQUFnQjs7QUFTN0IsSUFBTSxtQkFBbUIsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQy9DLGFBQVcsRUFBRSxhQUFhO0FBQzFCLE9BQUssRUFBRSxPQUFPO0FBQ2QsUUFBTSxFQUFFLFFBQVE7QUFDaEIsT0FBSyxFQUFFLE9BQU87Q0FDZixDQUFDLENBQUM7OztBQUVILElBQU0sd0JBQXdCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUM3QyxhQUFXLEVBQUUsc0JBQXNCO0FBQ25DLE9BQUssRUFBRSx1QkFBdUI7QUFDOUIsUUFBTSxFQUFFLHdCQUF3QjtBQUNoQyxPQUFLLEVBQUUsdUJBQXVCO0NBQy9CLENBQUMsQ0FBQzs7Ozs7O0FBTUksSUFBTSxjQUFjLEdBQUcsU0FBakIsY0FBYyxDQUFJLEtBQUssRUFBMEI7TUFFMUQsU0FBUyxHQUVQLEtBQUssQ0FGUCxTQUFTO01BQ1QsSUFBSSxHQUNGLEtBQUssQ0FEUCxJQUFJOztBQUVOLE1BQU0sUUFBUSxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksbUJBQW1CLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUNyRSxJQUFJLEdBQ0osbUJBQW1CLENBQUMsTUFBTSxDQUFDO0FBQy9CLE1BQU0sYUFBYSxHQUFHLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3pELE1BQU0sWUFBWSxHQUFHLDZCQUNuQixTQUFTLEVBQ1QsU0FBUyxFQUNULGFBQWEsQ0FDZCxDQUFDO0FBQ0YsU0FDRSwyQ0FBSyxTQUFTLEVBQUUsWUFBWSxBQUFDLEdBQUcsQ0FDaEM7Q0FDSCxDQUFDIiwiZmlsZSI6IkxvYWRpbmdTcGlubmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQge1JlYWN0fSBmcm9tICdyZWFjdC1mb3ItYXRvbSc7XG5cbnR5cGUgTG9hZGluZ1NwaW5uZXJTaXplID0gJ0VYVFJBX1NNQUxMJyB8ICdTTUFMTCcgfCAnTUVESVVNJyB8ICdMQVJHRSc7XG50eXBlIFByb3BzID0ge1xuICBjbGFzc05hbWU/IDogc3RyaW5nO1xuICAvKiogVGhlIHNpemUgb2YgdGhlIExvYWRpbmdTcGlubmVyLiBEZWZhdWx0cyB0byBNRURJVU0uICovXG4gIHNpemU/OiBMb2FkaW5nU3Bpbm5lclNpemU7XG59XG5cbmV4cG9ydCBjb25zdCBMb2FkaW5nU3Bpbm5lclNpemVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIEVYVFJBX1NNQUxMOiAnRVhUUkFfU01BTEwnLFxuICBTTUFMTDogJ1NNQUxMJyxcbiAgTUVESVVNOiAnTUVESVVNJyxcbiAgTEFSR0U6ICdMQVJHRScsXG59KTtcblxuY29uc3QgTG9hZGluZ1NwaW5uZXJDbGFzc25hbWVzID0gT2JqZWN0LmZyZWV6ZSh7XG4gIEVYVFJBX1NNQUxMOiAnbG9hZGluZy1zcGlubmVyLXRpbnknLFxuICBTTUFMTDogJ2xvYWRpbmctc3Bpbm5lci1zbWFsbCcsXG4gIE1FRElVTTogJ2xvYWRpbmctc3Bpbm5lci1tZWRpdW0nLFxuICBMQVJHRTogJ2xvYWRpbmctc3Bpbm5lci1sYXJnZScsXG59KTtcblxuLyoqXG4gKiBTaG93cyBhbiBpbmRlZmluaXRlLCBhbmltYXRlZCBMb2FkaW5nU3Bpbm5lci5cbiAqL1xuLyogZXNsaW50LWRpc2FibGUgcmVhY3QvcHJvcC10eXBlcyAqL1xuZXhwb3J0IGNvbnN0IExvYWRpbmdTcGlubmVyID0gKHByb3BzOiBQcm9wcyk6IFJlYWN0RWxlbWVudCA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgc2l6ZSxcbiAgfSA9IHByb3BzO1xuICBjb25zdCBzYWZlU2l6ZSA9IHNpemUgIT0gbnVsbCAmJiBMb2FkaW5nU3Bpbm5lclNpemVzLmhhc093blByb3BlcnR5KHNpemUpXG4gICAgPyBzaXplXG4gICAgOiBMb2FkaW5nU3Bpbm5lclNpemVzLk1FRElVTTtcbiAgY29uc3Qgc2l6ZUNsYXNzbmFtZSA9IExvYWRpbmdTcGlubmVyQ2xhc3NuYW1lc1tzYWZlU2l6ZV07XG4gIGNvbnN0IG5ld0NsYXNzTmFtZSA9IGNsYXNzbmFtZXMoXG4gICAgY2xhc3NOYW1lLFxuICAgICdsb2FkaW5nJyxcbiAgICBzaXplQ2xhc3NuYW1lLFxuICApO1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtuZXdDbGFzc05hbWV9IC8+XG4gICk7XG59O1xuIl19