Object.defineProperty(exports, '__esModule', {
  value: true
});

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

// TODO figure out how to allow the diagnostic consumer to poll (for example, if
// it was just activated and wants diagnostic messages without having to wait
// for an event to occur)

// Implicit invalidation semantics:
//
// - Previous 'file' scope messages are invalidated if and only if
// filePathToMessages contains their key as a path.
//
// - All previous 'project' scope messages are invalidated whenever
// projectMessages is populated.

var DiagnosticStore = require('./DiagnosticStore');

/**
 * Linter APIs, for compatibility with the Atom linter package.
 */

module.exports = {
  DiagnosticStore: DiagnosticStore
};

/**
 * Extension: Allows a provider to include a display name that will be shown with its messages.
 */

/**
 * In the official Linter API, the providerName is just "name".
 */

/**
 * Extension: Intended for developers who want to provide both interfaces to cater towards people
 * who use only the `linter` package. This way you can provide both, but tell Nuclide to ignore
 * the `linter` provider so that duplicate results do not appear.
 */

/**
 * Extension: Overrides `grammarScopes` and triggers the linter on changes to any file, rather
 * than just files with specific grammar scopes.
 */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUdBLElBQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDOzs7Ozs7QUFzRHJELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZixpQkFBZSxFQUFmLGVBQWU7Q0FDaEIsQ0FBQyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IHR5cGUge09ic2VydmFibGV9IGZyb20gJ0ByZWFjdGl2ZXgvcnhqcyc7XG5pbXBvcnQgdHlwZSB7TnVjbGlkZVVyaX0gZnJvbSAnLi4vLi4vbnVjbGlkZS1yZW1vdGUtdXJpJztcblxuaW1wb3J0IHR5cGUge1RleHRFZGl0fSBmcm9tICcuLi8uLi9udWNsaWRlLXRleHRlZGl0JztcblxuZXhwb3J0IHR5cGUgSW52YWxpZGF0aW9uTWVzc2FnZSA9IHtcbiAgc2NvcGU6ICdmaWxlJztcbiAgZmlsZVBhdGhzOiBBcnJheTxOdWNsaWRlVXJpPjtcbn0gfCB7XG4gIHNjb3BlOiAncHJvamVjdCc7XG59IHwge1xuICBzY29wZTogJ2FsbCc7XG59O1xuXG5leHBvcnQgdHlwZSBNZXNzYWdlVXBkYXRlQ2FsbGJhY2sgPSAodXBkYXRlOiBEaWFnbm9zdGljUHJvdmlkZXJVcGRhdGUpID0+IG1peGVkO1xuZXhwb3J0IHR5cGUgTWVzc2FnZUludmFsaWRhdGlvbkNhbGxiYWNrID0gKG1lc3NhZ2U6IEludmFsaWRhdGlvbk1lc3NhZ2UpID0+IG1peGVkO1xuXG4vLyBUT0RPIGZpZ3VyZSBvdXQgaG93IHRvIGFsbG93IHRoZSBkaWFnbm9zdGljIGNvbnN1bWVyIHRvIHBvbGwgKGZvciBleGFtcGxlLCBpZlxuLy8gaXQgd2FzIGp1c3QgYWN0aXZhdGVkIGFuZCB3YW50cyBkaWFnbm9zdGljIG1lc3NhZ2VzIHdpdGhvdXQgaGF2aW5nIHRvIHdhaXRcbi8vIGZvciBhbiBldmVudCB0byBvY2N1cilcbmV4cG9ydCB0eXBlIENhbGxiYWNrRGlhZ25vc3RpY1Byb3ZpZGVyID0ge1xuICBvbk1lc3NhZ2VVcGRhdGU6IChjYWxsYmFjazogTWVzc2FnZVVwZGF0ZUNhbGxiYWNrKSA9PiBJRGlzcG9zYWJsZTtcbiAgb25NZXNzYWdlSW52YWxpZGF0aW9uOiAoY2FsbGJhY2s6IE1lc3NhZ2VJbnZhbGlkYXRpb25DYWxsYmFjaykgPT4gSURpc3Bvc2FibGU7XG59O1xuXG5leHBvcnQgdHlwZSBPYnNlcnZhYmxlRGlhZ25vc3RpY1Byb3ZpZGVyID0ge1xuICB1cGRhdGVzOiBPYnNlcnZhYmxlPERpYWdub3N0aWNQcm92aWRlclVwZGF0ZT47XG4gIGludmFsaWRhdGlvbnM6IE9ic2VydmFibGU8SW52YWxpZGF0aW9uTWVzc2FnZT47XG59O1xuXG5leHBvcnQgdHlwZSBEaWFnbm9zdGljUHJvdmlkZXIgPSBDYWxsYmFja0RpYWdub3N0aWNQcm92aWRlciB8IE9ic2VydmFibGVEaWFnbm9zdGljUHJvdmlkZXI7XG5cbi8vIEltcGxpY2l0IGludmFsaWRhdGlvbiBzZW1hbnRpY3M6XG4vL1xuLy8gLSBQcmV2aW91cyAnZmlsZScgc2NvcGUgbWVzc2FnZXMgYXJlIGludmFsaWRhdGVkIGlmIGFuZCBvbmx5IGlmXG4vLyBmaWxlUGF0aFRvTWVzc2FnZXMgY29udGFpbnMgdGhlaXIga2V5IGFzIGEgcGF0aC5cbi8vXG4vLyAtIEFsbCBwcmV2aW91cyAncHJvamVjdCcgc2NvcGUgbWVzc2FnZXMgYXJlIGludmFsaWRhdGVkIHdoZW5ldmVyXG4vLyBwcm9qZWN0TWVzc2FnZXMgaXMgcG9wdWxhdGVkLlxuZXhwb3J0IHR5cGUgRGlhZ25vc3RpY1Byb3ZpZGVyVXBkYXRlID0ge1xuICBmaWxlUGF0aFRvTWVzc2FnZXM/OiBNYXA8TnVjbGlkZVVyaSwgQXJyYXk8RmlsZURpYWdub3N0aWNNZXNzYWdlPj47XG4gIHByb2plY3RNZXNzYWdlcz86IEFycmF5PFByb2plY3REaWFnbm9zdGljTWVzc2FnZT47XG59O1xuXG5leHBvcnQgdHlwZSBNZXNzYWdlVHlwZSA9ICdFcnJvcicgfCAnV2FybmluZyc7XG5cbmV4cG9ydCB0eXBlIFRyYWNlID0ge1xuICB0eXBlOiAnVHJhY2UnO1xuICB0ZXh0Pzogc3RyaW5nO1xuICBodG1sPzogc3RyaW5nO1xuICBmaWxlUGF0aD86IE51Y2xpZGVVcmk7XG4gIHJhbmdlPzogYXRvbSRSYW5nZTtcbn07XG5cbmV4cG9ydCB0eXBlIEZpbGVEaWFnbm9zdGljTWVzc2FnZSA9IHtcbiAgc2NvcGU6ICdmaWxlJztcbiAgcHJvdmlkZXJOYW1lOiBzdHJpbmc7XG4gIHR5cGU6IE1lc3NhZ2VUeXBlO1xuICBmaWxlUGF0aDogTnVjbGlkZVVyaTtcbiAgdGV4dD86IHN0cmluZztcbiAgaHRtbD86IHN0cmluZztcbiAgcmFuZ2U/OiBhdG9tJFJhbmdlO1xuICB0cmFjZT86IEFycmF5PFRyYWNlPjtcbiAgZml4PzogVGV4dEVkaXQ7XG59O1xuXG5leHBvcnQgdHlwZSBQcm9qZWN0RGlhZ25vc3RpY01lc3NhZ2UgPSB7XG4gIHNjb3BlOiAncHJvamVjdCc7XG4gIHByb3ZpZGVyTmFtZTogc3RyaW5nO1xuICB0eXBlOiBNZXNzYWdlVHlwZTtcbiAgdGV4dD86IHN0cmluZztcbiAgaHRtbD86IHN0cmluZztcbiAgcmFuZ2U/OiBhdG9tJFJhbmdlO1xuICB0cmFjZT86IEFycmF5PFRyYWNlPjtcbn07XG5cbmV4cG9ydCB0eXBlIEZpbGVNZXNzYWdlVXBkYXRlID0ge1xuICBmaWxlUGF0aDogTnVjbGlkZVVyaTtcbiAgbWVzc2FnZXM6IEFycmF5PEZpbGVEaWFnbm9zdGljTWVzc2FnZT47XG59O1xuXG5leHBvcnQgdHlwZSBEaWFnbm9zdGljTWVzc2FnZSA9IEZpbGVEaWFnbm9zdGljTWVzc2FnZSB8IFByb2plY3REaWFnbm9zdGljTWVzc2FnZTtcblxuZXhwb3J0IHR5cGUgRGlhZ25vc3RpY1VwZGF0ZXIgPSB7XG4gIG9uRmlsZU1lc3NhZ2VzRGlkVXBkYXRlOlxuICAgIChjYWxsYmFjazogKHVwZGF0ZTogRmlsZU1lc3NhZ2VVcGRhdGUpID0+IG1peGVkLCBmaWxlUGF0aDogTnVjbGlkZVVyaSkgPT4gSURpc3Bvc2FibGU7XG4gIG9uUHJvamVjdE1lc3NhZ2VzRGlkVXBkYXRlOlxuICAgIChjYWxsYmFjazogKG1lc3NhZ2VzOiBBcnJheTxQcm9qZWN0RGlhZ25vc3RpY01lc3NhZ2U+KSA9PiBtaXhlZCkgPT4gSURpc3Bvc2FibGU7XG4gIG9uQWxsTWVzc2FnZXNEaWRVcGRhdGU6XG4gICAgKGNhbGxiYWNrOiAobWVzc2FnZXM6IEFycmF5PERpYWdub3N0aWNNZXNzYWdlPikgPT4gbWl4ZWQpID0+IElEaXNwb3NhYmxlO1xuICBhcHBseUZpeDogKG1lc3NhZ2U6IEZpbGVEaWFnbm9zdGljTWVzc2FnZSkgPT4gdm9pZDtcbiAgYXBwbHlGaXhlc0ZvckZpbGU6IChmaWxlOiBOdWNsaWRlVXJpKSA9PiB2b2lkO1xufTtcblxuY29uc3QgRGlhZ25vc3RpY1N0b3JlID0gcmVxdWlyZSgnLi9EaWFnbm9zdGljU3RvcmUnKTtcblxuLyoqXG4gKiBMaW50ZXIgQVBJcywgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCB0aGUgQXRvbSBsaW50ZXIgcGFja2FnZS5cbiAqL1xuXG5leHBvcnQgdHlwZSBMaW50ZXJUcmFjZSA9IHtcbiAgdHlwZTogJ1RyYWNlJztcbiAgdGV4dD86IHN0cmluZztcbiAgaHRtbD86IHN0cmluZztcbiAgZmlsZVBhdGg6IHN0cmluZztcbiAgcmFuZ2U/OiBhdG9tJFJhbmdlO1xufTtcblxuZXhwb3J0IHR5cGUgTGludGVyTWVzc2FnZSA9IHtcbiAgdHlwZTogJ0Vycm9yJyB8ICdXYXJuaW5nJztcbiAgdGV4dD86IHN0cmluZztcbiAgaHRtbD86IHN0cmluZztcbiAgZmlsZVBhdGg/OiBOdWNsaWRlVXJpO1xuICByYW5nZT86IGF0b20kUmFuZ2U7XG4gIHRyYWNlPzogQXJyYXk8TGludGVyVHJhY2U+O1xuICBmaXg/OiB7XG4gICAgcmFuZ2U6IGF0b20kUmFuZ2U7XG4gICAgbmV3VGV4dDogc3RyaW5nO1xuICAgIG9sZFRleHQ/OiBzdHJpbmc7XG4gIH07XG59O1xuXG5leHBvcnQgdHlwZSBMaW50ZXJQcm92aWRlciA9IHtcbiAgLyoqXG4gICAqIEV4dGVuc2lvbjogQWxsb3dzIGEgcHJvdmlkZXIgdG8gaW5jbHVkZSBhIGRpc3BsYXkgbmFtZSB0aGF0IHdpbGwgYmUgc2hvd24gd2l0aCBpdHMgbWVzc2FnZXMuXG4gICAqL1xuICBwcm92aWRlck5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBJbiB0aGUgb2ZmaWNpYWwgTGludGVyIEFQSSwgdGhlIHByb3ZpZGVyTmFtZSBpcyBqdXN0IFwibmFtZVwiLlxuICAgKi9cbiAgbmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIEV4dGVuc2lvbjogSW50ZW5kZWQgZm9yIGRldmVsb3BlcnMgd2hvIHdhbnQgdG8gcHJvdmlkZSBib3RoIGludGVyZmFjZXMgdG8gY2F0ZXIgdG93YXJkcyBwZW9wbGVcbiAgICogd2hvIHVzZSBvbmx5IHRoZSBgbGludGVyYCBwYWNrYWdlLiBUaGlzIHdheSB5b3UgY2FuIHByb3ZpZGUgYm90aCwgYnV0IHRlbGwgTnVjbGlkZSB0byBpZ25vcmVcbiAgICogdGhlIGBsaW50ZXJgIHByb3ZpZGVyIHNvIHRoYXQgZHVwbGljYXRlIHJlc3VsdHMgZG8gbm90IGFwcGVhci5cbiAgICovXG4gIGRpc2FibGVkRm9yTnVjbGlkZT86IGJvb2xlYW47XG4gIGdyYW1tYXJTY29wZXM6IEFycmF5PHN0cmluZz47XG4gIC8qKlxuICAgKiBFeHRlbnNpb246IE92ZXJyaWRlcyBgZ3JhbW1hclNjb3Blc2AgYW5kIHRyaWdnZXJzIHRoZSBsaW50ZXIgb24gY2hhbmdlcyB0byBhbnkgZmlsZSwgcmF0aGVyXG4gICAqIHRoYW4ganVzdCBmaWxlcyB3aXRoIHNwZWNpZmljIGdyYW1tYXIgc2NvcGVzLlxuICAgKi9cbiAgYWxsR3JhbW1hclNjb3Blcz86IGJvb2xlYW47XG4gIHNjb3BlOiAnZmlsZScgfCAncHJvamVjdCc7XG4gIGxpbnRPbkZseTogYm9vbGVhbjtcbiAgbGludDogKHRleHRFZGl0b3I6IFRleHRFZGl0b3IpID0+IFByb21pc2U8QXJyYXk8TGludGVyTWVzc2FnZT4+O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIERpYWdub3N0aWNTdG9yZSxcbn07XG4iXX0=