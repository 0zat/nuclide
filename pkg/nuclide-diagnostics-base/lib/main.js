Object.defineProperty(exports, '__esModule', {
  value: true
});

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

// TODO figure out how to allow the diagnostic consumer to poll (for example, if
// it was just activated and wants diagnostic messages without having to wait
// for an event to occur)

// Implicit invalidation semantics:
//
// - Previous 'file' scope messages are invalidated if and only if
// filePathToMessages contains their key as a path.
//
// - All previous 'project' scope messages are invalidated whenever
// projectMessages is populated.

var DiagnosticStore = require('./DiagnosticStore');

/**
 * Linter APIs, for compatibility with the Atom linter package.
 */

module.exports = {
  DiagnosticStore: DiagnosticStore
};

/**
 * Extension: Allows a provider to include a display name that will be shown with its messages.
 */

/**
 * In the official Linter API, the providerName is just "name".
 */

/**
 * Extension: Intended for developers who want to provide both interfaces to cater towards people
 * who use only the `linter` package. This way you can provide both, but tell Nuclide to ignore
 * the `linter` provider so that duplicate results do not appear.
 */

/**
 * Extension: Overrides `grammarScopes` and triggers the linter on changes to any file, rather
 * than just files with specific grammar scopes.
 */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUdBLElBQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDOzs7Ozs7QUFzRHJELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZixpQkFBZSxFQUFmLGVBQWU7Q0FDaEIsQ0FBQyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IHR5cGUge09ic2VydmFibGV9IGZyb20gJ3J4JztcbmltcG9ydCB0eXBlIHtOdWNsaWRlVXJpfSBmcm9tICcuLi8uLi9udWNsaWRlLXJlbW90ZS11cmknO1xuXG5pbXBvcnQgdHlwZSB7VGV4dEVkaXR9IGZyb20gJy4uLy4uL251Y2xpZGUtdGV4dGVkaXQnO1xuXG5leHBvcnQgdHlwZSBJbnZhbGlkYXRpb25NZXNzYWdlID0ge1xuICBzY29wZTogJ2ZpbGUnO1xuICBmaWxlUGF0aHM6IEFycmF5PE51Y2xpZGVVcmk+O1xufSB8IHtcbiAgc2NvcGU6ICdwcm9qZWN0Jztcbn0gfCB7XG4gIHNjb3BlOiAnYWxsJztcbn07XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VVcGRhdGVDYWxsYmFjayA9ICh1cGRhdGU6IERpYWdub3N0aWNQcm92aWRlclVwZGF0ZSkgPT4gbWl4ZWQ7XG5leHBvcnQgdHlwZSBNZXNzYWdlSW52YWxpZGF0aW9uQ2FsbGJhY2sgPSAobWVzc2FnZTogSW52YWxpZGF0aW9uTWVzc2FnZSkgPT4gbWl4ZWQ7XG5cbi8vIFRPRE8gZmlndXJlIG91dCBob3cgdG8gYWxsb3cgdGhlIGRpYWdub3N0aWMgY29uc3VtZXIgdG8gcG9sbCAoZm9yIGV4YW1wbGUsIGlmXG4vLyBpdCB3YXMganVzdCBhY3RpdmF0ZWQgYW5kIHdhbnRzIGRpYWdub3N0aWMgbWVzc2FnZXMgd2l0aG91dCBoYXZpbmcgdG8gd2FpdFxuLy8gZm9yIGFuIGV2ZW50IHRvIG9jY3VyKVxuZXhwb3J0IHR5cGUgQ2FsbGJhY2tEaWFnbm9zdGljUHJvdmlkZXIgPSB7XG4gIG9uTWVzc2FnZVVwZGF0ZTogKGNhbGxiYWNrOiBNZXNzYWdlVXBkYXRlQ2FsbGJhY2spID0+IElEaXNwb3NhYmxlO1xuICBvbk1lc3NhZ2VJbnZhbGlkYXRpb246IChjYWxsYmFjazogTWVzc2FnZUludmFsaWRhdGlvbkNhbGxiYWNrKSA9PiBJRGlzcG9zYWJsZTtcbn07XG5cbmV4cG9ydCB0eXBlIE9ic2VydmFibGVEaWFnbm9zdGljUHJvdmlkZXIgPSB7XG4gIHVwZGF0ZXM6IE9ic2VydmFibGU8RGlhZ25vc3RpY1Byb3ZpZGVyVXBkYXRlPjtcbiAgaW52YWxpZGF0aW9uczogT2JzZXJ2YWJsZTxJbnZhbGlkYXRpb25NZXNzYWdlPjtcbn07XG5cbmV4cG9ydCB0eXBlIERpYWdub3N0aWNQcm92aWRlciA9IENhbGxiYWNrRGlhZ25vc3RpY1Byb3ZpZGVyIHwgT2JzZXJ2YWJsZURpYWdub3N0aWNQcm92aWRlcjtcblxuLy8gSW1wbGljaXQgaW52YWxpZGF0aW9uIHNlbWFudGljczpcbi8vXG4vLyAtIFByZXZpb3VzICdmaWxlJyBzY29wZSBtZXNzYWdlcyBhcmUgaW52YWxpZGF0ZWQgaWYgYW5kIG9ubHkgaWZcbi8vIGZpbGVQYXRoVG9NZXNzYWdlcyBjb250YWlucyB0aGVpciBrZXkgYXMgYSBwYXRoLlxuLy9cbi8vIC0gQWxsIHByZXZpb3VzICdwcm9qZWN0JyBzY29wZSBtZXNzYWdlcyBhcmUgaW52YWxpZGF0ZWQgd2hlbmV2ZXJcbi8vIHByb2plY3RNZXNzYWdlcyBpcyBwb3B1bGF0ZWQuXG5leHBvcnQgdHlwZSBEaWFnbm9zdGljUHJvdmlkZXJVcGRhdGUgPSB7XG4gIGZpbGVQYXRoVG9NZXNzYWdlcz86IE1hcDxOdWNsaWRlVXJpLCBBcnJheTxGaWxlRGlhZ25vc3RpY01lc3NhZ2U+PjtcbiAgcHJvamVjdE1lc3NhZ2VzPzogQXJyYXk8UHJvamVjdERpYWdub3N0aWNNZXNzYWdlPjtcbn07XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VUeXBlID0gJ0Vycm9yJyB8ICdXYXJuaW5nJztcblxuZXhwb3J0IHR5cGUgVHJhY2UgPSB7XG4gIHR5cGU6ICdUcmFjZSc7XG4gIHRleHQ/OiBzdHJpbmc7XG4gIGh0bWw/OiBzdHJpbmc7XG4gIGZpbGVQYXRoPzogTnVjbGlkZVVyaTtcbiAgcmFuZ2U/OiBhdG9tJFJhbmdlO1xufTtcblxuZXhwb3J0IHR5cGUgRmlsZURpYWdub3N0aWNNZXNzYWdlID0ge1xuICBzY29wZTogJ2ZpbGUnO1xuICBwcm92aWRlck5hbWU6IHN0cmluZztcbiAgdHlwZTogTWVzc2FnZVR5cGU7XG4gIGZpbGVQYXRoOiBOdWNsaWRlVXJpO1xuICB0ZXh0Pzogc3RyaW5nO1xuICBodG1sPzogc3RyaW5nO1xuICByYW5nZT86IGF0b20kUmFuZ2U7XG4gIHRyYWNlPzogQXJyYXk8VHJhY2U+O1xuICBmaXg/OiBUZXh0RWRpdDtcbn07XG5cbmV4cG9ydCB0eXBlIFByb2plY3REaWFnbm9zdGljTWVzc2FnZSA9IHtcbiAgc2NvcGU6ICdwcm9qZWN0JztcbiAgcHJvdmlkZXJOYW1lOiBzdHJpbmc7XG4gIHR5cGU6IE1lc3NhZ2VUeXBlO1xuICB0ZXh0Pzogc3RyaW5nO1xuICBodG1sPzogc3RyaW5nO1xuICByYW5nZT86IGF0b20kUmFuZ2U7XG4gIHRyYWNlPzogQXJyYXk8VHJhY2U+O1xufTtcblxuZXhwb3J0IHR5cGUgRmlsZU1lc3NhZ2VVcGRhdGUgPSB7XG4gIGZpbGVQYXRoOiBOdWNsaWRlVXJpO1xuICBtZXNzYWdlczogQXJyYXk8RmlsZURpYWdub3N0aWNNZXNzYWdlPjtcbn07XG5cbmV4cG9ydCB0eXBlIERpYWdub3N0aWNNZXNzYWdlID0gRmlsZURpYWdub3N0aWNNZXNzYWdlIHwgUHJvamVjdERpYWdub3N0aWNNZXNzYWdlO1xuXG5leHBvcnQgdHlwZSBEaWFnbm9zdGljVXBkYXRlciA9IHtcbiAgb25GaWxlTWVzc2FnZXNEaWRVcGRhdGU6XG4gICAgKGNhbGxiYWNrOiAodXBkYXRlOiBGaWxlTWVzc2FnZVVwZGF0ZSkgPT4gbWl4ZWQsIGZpbGVQYXRoOiBOdWNsaWRlVXJpKSA9PiBJRGlzcG9zYWJsZTtcbiAgb25Qcm9qZWN0TWVzc2FnZXNEaWRVcGRhdGU6XG4gICAgKGNhbGxiYWNrOiAobWVzc2FnZXM6IEFycmF5PFByb2plY3REaWFnbm9zdGljTWVzc2FnZT4pID0+IG1peGVkKSA9PiBJRGlzcG9zYWJsZTtcbiAgb25BbGxNZXNzYWdlc0RpZFVwZGF0ZTpcbiAgICAoY2FsbGJhY2s6IChtZXNzYWdlczogQXJyYXk8RGlhZ25vc3RpY01lc3NhZ2U+KSA9PiBtaXhlZCkgPT4gSURpc3Bvc2FibGU7XG4gIGFwcGx5Rml4OiAobWVzc2FnZTogRmlsZURpYWdub3N0aWNNZXNzYWdlKSA9PiB2b2lkO1xuICBhcHBseUZpeGVzRm9yRmlsZTogKGZpbGU6IE51Y2xpZGVVcmkpID0+IHZvaWQ7XG59O1xuXG5jb25zdCBEaWFnbm9zdGljU3RvcmUgPSByZXF1aXJlKCcuL0RpYWdub3N0aWNTdG9yZScpO1xuXG4vKipcbiAqIExpbnRlciBBUElzLCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBBdG9tIGxpbnRlciBwYWNrYWdlLlxuICovXG5cbmV4cG9ydCB0eXBlIExpbnRlclRyYWNlID0ge1xuICB0eXBlOiAnVHJhY2UnO1xuICB0ZXh0Pzogc3RyaW5nO1xuICBodG1sPzogc3RyaW5nO1xuICBmaWxlUGF0aDogc3RyaW5nO1xuICByYW5nZT86IGF0b20kUmFuZ2U7XG59O1xuXG5leHBvcnQgdHlwZSBMaW50ZXJNZXNzYWdlID0ge1xuICB0eXBlOiAnRXJyb3InIHwgJ1dhcm5pbmcnO1xuICB0ZXh0Pzogc3RyaW5nO1xuICBodG1sPzogc3RyaW5nO1xuICBmaWxlUGF0aD86IE51Y2xpZGVVcmk7XG4gIHJhbmdlPzogYXRvbSRSYW5nZTtcbiAgdHJhY2U/OiBBcnJheTxMaW50ZXJUcmFjZT47XG4gIGZpeD86IHtcbiAgICByYW5nZTogYXRvbSRSYW5nZTtcbiAgICBuZXdUZXh0OiBzdHJpbmc7XG4gICAgb2xkVGV4dD86IHN0cmluZztcbiAgfTtcbn07XG5cbmV4cG9ydCB0eXBlIExpbnRlclByb3ZpZGVyID0ge1xuICAvKipcbiAgICogRXh0ZW5zaW9uOiBBbGxvd3MgYSBwcm92aWRlciB0byBpbmNsdWRlIGEgZGlzcGxheSBuYW1lIHRoYXQgd2lsbCBiZSBzaG93biB3aXRoIGl0cyBtZXNzYWdlcy5cbiAgICovXG4gIHByb3ZpZGVyTmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIEluIHRoZSBvZmZpY2lhbCBMaW50ZXIgQVBJLCB0aGUgcHJvdmlkZXJOYW1lIGlzIGp1c3QgXCJuYW1lXCIuXG4gICAqL1xuICBuYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogRXh0ZW5zaW9uOiBJbnRlbmRlZCBmb3IgZGV2ZWxvcGVycyB3aG8gd2FudCB0byBwcm92aWRlIGJvdGggaW50ZXJmYWNlcyB0byBjYXRlciB0b3dhcmRzIHBlb3BsZVxuICAgKiB3aG8gdXNlIG9ubHkgdGhlIGBsaW50ZXJgIHBhY2thZ2UuIFRoaXMgd2F5IHlvdSBjYW4gcHJvdmlkZSBib3RoLCBidXQgdGVsbCBOdWNsaWRlIHRvIGlnbm9yZVxuICAgKiB0aGUgYGxpbnRlcmAgcHJvdmlkZXIgc28gdGhhdCBkdXBsaWNhdGUgcmVzdWx0cyBkbyBub3QgYXBwZWFyLlxuICAgKi9cbiAgZGlzYWJsZWRGb3JOdWNsaWRlPzogYm9vbGVhbjtcbiAgZ3JhbW1hclNjb3BlczogQXJyYXk8c3RyaW5nPjtcbiAgLyoqXG4gICAqIEV4dGVuc2lvbjogT3ZlcnJpZGVzIGBncmFtbWFyU2NvcGVzYCBhbmQgdHJpZ2dlcnMgdGhlIGxpbnRlciBvbiBjaGFuZ2VzIHRvIGFueSBmaWxlLCByYXRoZXJcbiAgICogdGhhbiBqdXN0IGZpbGVzIHdpdGggc3BlY2lmaWMgZ3JhbW1hciBzY29wZXMuXG4gICAqL1xuICBhbGxHcmFtbWFyU2NvcGVzPzogYm9vbGVhbjtcbiAgc2NvcGU6ICdmaWxlJyB8ICdwcm9qZWN0JztcbiAgbGludE9uRmx5OiBib29sZWFuO1xuICBsaW50OiAodGV4dEVkaXRvcjogVGV4dEVkaXRvcikgPT4gUHJvbWlzZTxBcnJheTxMaW50ZXJNZXNzYWdlPj47XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRGlhZ25vc3RpY1N0b3JlLFxufTtcbiJdfQ==