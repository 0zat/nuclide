Object.defineProperty(exports, '__esModule', {
  value: true
});

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.createOutlines = createOutlines;

var outlineForEditor = _asyncToGenerator(function* (providers, editor) {
  var scopeName = editor.getGrammar().scopeName;
  var readableGrammarName = editor.getGrammar().name;

  var outlineProvider = providers.findProvider(scopeName);
  if (outlineProvider == null) {
    return {
      kind: 'no-provider',
      grammar: readableGrammarName
    };
  }
  var outline = undefined;
  try {
    outline = yield outlineProvider.getOutline(editor);
  } catch (e) {
    logger.error('Error in outline provider:', e);
    outline = null;
  }
  if (outline == null) {
    return {
      kind: 'provider-no-outline'
    };
  }
  return {
    kind: 'outline',
    outlineTrees: outline.outlineTrees.map(treeToUiTree),
    editor: editor
  };
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

var _rx = require('rx');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _nuclideCommons = require('../../nuclide-commons');

var _nuclideAtomHelpers = require('../../nuclide-atom-helpers');

var _nuclideLogging = require('../../nuclide-logging');

var observableFromSubscribeFunction = _nuclideCommons.event.observableFromSubscribeFunction;

var logger = (0, _nuclideLogging.getLogger)();

var TAB_SWITCH_DELAY = 100; // ms

function createOutlines(providers) {
  var paneChanges = observableFromSubscribeFunction(atom.workspace.observeActivePaneItem.bind(atom.workspace))
  // Delay the work on tab switch to keep tab switches snappy and avoid doing a bunch of
  // computation if there are a lot of consecutive tab switches.
  .debounce(TAB_SWITCH_DELAY);

  return paneChanges.map(function () {
    return atom.workspace.getActiveTextEditor();
  }).flatMapLatest(function (editor) {
    return outlinesForEditor(providers, editor);
  });
}

function outlinesForEditor(providers, editorArg) {
  // needs to be const so the refinement holds in closures
  var editor = editorArg;
  if (editor == null) {
    return _rx.Observable.just({
      kind: 'not-text-editor'
    });
  }

  var editorEvents = _rx.Observable.concat(
  // Emit one event at the beginning to trigger the computation of the initial outline
  _rx.Observable.just(), observableFromSubscribeFunction(editor.onDidStopChanging.bind(editor)));

  var outlines = editorEvents.flatMap(function () {
    return outlineForEditor(providers, editor);
  });

  var highlightedOutlines = outlines.flatMapLatest(function (outline) {
    if (outline.kind !== 'outline') {
      return _rx.Observable.just(outline);
    }
    return (0, _nuclideAtomHelpers.getCursorPositions)(editor).map(function (cursorLocation) {
      return highlightCurrentNode(outline, cursorLocation);
    });
  });

  return _rx.Observable.concat(_rx.Observable.just({ kind: 'empty' }), highlightedOutlines);
}

function treeToUiTree(outlineTree) {
  return {
    plainText: outlineTree.plainText,
    tokenizedText: outlineTree.tokenizedText,
    startPosition: outlineTree.startPosition,
    endPosition: outlineTree.endPosition,
    highlighted: false,
    children: outlineTree.children.map(treeToUiTree)
  };
}

// Return an outline object with the node under the cursor highlighted. Does not mutate the
// original.
function highlightCurrentNode(outline, cursorLocation) {
  (0, _assert2['default'])(outline.kind === 'outline');
  return _extends({}, outline, {
    outlineTrees: highlightCurrentNodeInTrees(outline.outlineTrees, cursorLocation)
  });
}

function highlightCurrentNodeInTrees(outlineTrees, cursorLocation) {
  return outlineTrees.map(function (tree) {
    return _extends({}, tree, {
      highlighted: shouldHighlightNode(tree, cursorLocation),
      children: highlightCurrentNodeInTrees(tree.children, cursorLocation)
    });
  });
}

function shouldHighlightNode(outlineTree, cursorLocation) {
  var startPosition = outlineTree.startPosition;
  var endPosition = outlineTree.endPosition;
  if (endPosition == null) {
    return false;
  }
  if (outlineTree.children.length !== 0) {
    var childStartPosition = outlineTree.children[0].startPosition;
    // Since the parent is rendered in the list above the children, it doesn't really make sense to
    // highlight it if you are below the start position of any child. However, if you are at the top
    // of a class it does seem desirable to highlight it.
    return cursorLocation.isGreaterThanOrEqual(startPosition) && cursorLocation.isLessThan(childStartPosition);
  }
  return cursorLocation.isGreaterThanOrEqual(startPosition) && cursorLocation.isLessThanOrEqual(endPosition);
}
//# sourceMappingURL=data:application/json;base64,