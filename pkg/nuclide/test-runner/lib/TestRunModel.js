var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

/**
 * Status codes returned in the "status" field of the testing utility's JSON response.
 */
var Ansi = require('./Ansi');

var Status = {
  PASSED: 1,
  FAILED: 2,
  SKIPPED: 3,
  FATAL: 4,
  TIMEOUT: 5
};

var StatusSymbol = {};
StatusSymbol[Status.PASSED] = Ansi.GREEN + '✓' + Ansi.RESET;
StatusSymbol[Status.FAILED] = Ansi.RED + '✗' + Ansi.RESET;
StatusSymbol[Status.SKIPPED] = Ansi.YELLOW + '?' + Ansi.RESET;
StatusSymbol[Status.FATAL] = Ansi.RED + '✘' + Ansi.RESET;
StatusSymbol[Status.TIMEOUT] = Ansi.BLUE + '✉' + Ansi.RESET;

var StatusMessage = {};
StatusMessage[Status.PASSED] = Ansi.GREEN + '(PASS)' + Ansi.RESET;
StatusMessage[Status.FAILED] = Ansi.RED + '(FAIL)' + Ansi.RESET;
StatusMessage[Status.SKIPPED] = Ansi.YELLOW + '(SKIP)' + Ansi.RESET;
StatusMessage[Status.FATAL] = Ansi.RED + '(FATAL)' + Ansi.RESET;
StatusMessage[Status.TIMEOUT] = Ansi.BLUE + '(TIMEOUT)' + Ansi.RESET;

var TestRunModel = (function () {
  function TestRunModel(label, dispose) {
    _classCallCheck(this, TestRunModel);

    this.label = label;
    this.dispose = dispose;
  }

  // TODO: Use a property initializer when supported by Flow.

  _createClass(TestRunModel, [{
    key: 'getDuration',
    value: function getDuration() {
      if (this.startTime && this.endTime) {
        return this.endTime - this.startTime;
      }
    }
  }, {
    key: 'start',
    value: function start() {
      this.startTime = Date.now();
    }
  }, {
    key: 'stop',
    value: function stop() {
      this.endTime = Date.now();
    }

    /**
     * @return A summary of the test run including its name, its duration, and whether it passed,
     * failed, skipped, etc.
     */
  }], [{
    key: 'formatStatusMessage',
    value: function formatStatusMessage(name, duration, status) {
      var durationStr = duration.toFixed(3);
      return '      ' + StatusSymbol[status] + ' ' + name + ' ' + durationStr + 's ' + StatusMessage[status];
    }
  }]);

  return TestRunModel;
})();

TestRunModel.Status = Status;

module.exports = TestRunModel;
//# sourceMappingURL=data:application/json;base64,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Ozs7U0FuQ0csWUFBWTs7O0FBdUNsQixZQUFZLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQzs7QUFFN0IsTUFBTSxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUMiLCJmaWxlIjoiVGVzdFJ1bk1vZGVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuY29uc3QgQW5zaSA9IHJlcXVpcmUoJy4vQW5zaScpO1xuXG5pbXBvcnQgdHlwZSB7VGVzdFJ1blN0YXR1c30gZnJvbSAnLi4vLi4vdGVzdC1ydW5uZXItaW50ZXJmYWNlcyc7XG5cbi8qKlxuICogU3RhdHVzIGNvZGVzIHJldHVybmVkIGluIHRoZSBcInN0YXR1c1wiIGZpZWxkIG9mIHRoZSB0ZXN0aW5nIHV0aWxpdHkncyBKU09OIHJlc3BvbnNlLlxuICovXG5jb25zdCBTdGF0dXM6IHtba2V5OiBzdHJpbmddOiBUZXN0UnVuU3RhdHVzfSA9IHtcbiAgUEFTU0VEOiAxLFxuICBGQUlMRUQ6IDIsXG4gIFNLSVBQRUQ6IDMsXG4gIEZBVEFMOiA0LFxuICBUSU1FT1VUOiA1LFxufTtcblxuY29uc3QgU3RhdHVzU3ltYm9sOiB7W2tleTogVGVzdFJ1blN0YXR1c106IHN0cmluZ30gPSB7fTtcblN0YXR1c1N5bWJvbFtTdGF0dXMuUEFTU0VEXSA9IGAke0Fuc2kuR1JFRU594pyTJHtBbnNpLlJFU0VUfWA7XG5TdGF0dXNTeW1ib2xbU3RhdHVzLkZBSUxFRF0gPSBgJHtBbnNpLlJFRH3inJcke0Fuc2kuUkVTRVR9YDtcblN0YXR1c1N5bWJvbFtTdGF0dXMuU0tJUFBFRF0gPSBgJHtBbnNpLllFTExPV30/JHtBbnNpLlJFU0VUfWA7XG5TdGF0dXNTeW1ib2xbU3RhdHVzLkZBVEFMXSA9IGAke0Fuc2kuUkVEfeKcmCR7QW5zaS5SRVNFVH1gO1xuU3RhdHVzU3ltYm9sW1N0YXR1cy5USU1FT1VUXSA9IGAke0Fuc2kuQkxVRX3inIkke0Fuc2kuUkVTRVR9YDtcblxuY29uc3QgU3RhdHVzTWVzc2FnZToge1trZXk6IFRlc3RSdW5TdGF0dXNdOiBzdHJpbmd9ID0ge307XG5TdGF0dXNNZXNzYWdlW1N0YXR1cy5QQVNTRURdID0gYCR7QW5zaS5HUkVFTn0oUEFTUykke0Fuc2kuUkVTRVR9YDtcblN0YXR1c01lc3NhZ2VbU3RhdHVzLkZBSUxFRF0gPSBgJHtBbnNpLlJFRH0oRkFJTCkke0Fuc2kuUkVTRVR9YDtcblN0YXR1c01lc3NhZ2VbU3RhdHVzLlNLSVBQRURdID0gYCR7QW5zaS5ZRUxMT1d9KFNLSVApJHtBbnNpLlJFU0VUfWA7XG5TdGF0dXNNZXNzYWdlW1N0YXR1cy5GQVRBTF0gPSBgJHtBbnNpLlJFRH0oRkFUQUwpJHtBbnNpLlJFU0VUfWA7XG5TdGF0dXNNZXNzYWdlW1N0YXR1cy5USU1FT1VUXSA9IGAke0Fuc2kuQkxVRX0oVElNRU9VVCkke0Fuc2kuUkVTRVR9YDtcblxuY2xhc3MgVGVzdFJ1bk1vZGVsIHtcblxuICBzdGF0aWMgU3RhdHVzOiB7W2tleTogc3RyaW5nXTogVGVzdFJ1blN0YXR1c307XG5cbiAgc3RhcnRUaW1lOiA/bnVtYmVyO1xuICBlbmRUaW1lOiA/bnVtYmVyO1xuICBsYWJlbDogc3RyaW5nO1xuICBkaXNwb3NlOiA/KCkgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3RvcihsYWJlbDogc3RyaW5nLCBkaXNwb3NlOiAoKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xuICAgIHRoaXMuZGlzcG9zZSA9IGRpc3Bvc2U7XG4gIH1cblxuICBnZXREdXJhdGlvbigpOiA/bnVtYmVyIHtcbiAgICBpZiAodGhpcy5zdGFydFRpbWUgJiYgdGhpcy5lbmRUaW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbmRUaW1lIC0gdGhpcy5zdGFydFRpbWU7XG4gICAgfVxuICB9XG5cbiAgc3RhcnQoKTogdm9pZCB7XG4gICAgdGhpcy5zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICB9XG5cbiAgc3RvcCgpOiB2b2lkIHtcbiAgICB0aGlzLmVuZFRpbWUgPSBEYXRlLm5vdygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gQSBzdW1tYXJ5IG9mIHRoZSB0ZXN0IHJ1biBpbmNsdWRpbmcgaXRzIG5hbWUsIGl0cyBkdXJhdGlvbiwgYW5kIHdoZXRoZXIgaXQgcGFzc2VkLFxuICAgKiBmYWlsZWQsIHNraXBwZWQsIGV0Yy5cbiAgICovXG4gIHN0YXRpYyBmb3JtYXRTdGF0dXNNZXNzYWdlKG5hbWU6IHN0cmluZywgZHVyYXRpb246IG51bWJlciwgc3RhdHVzOiBUZXN0UnVuU3RhdHVzKTogc3RyaW5nIHtcbiAgICBjb25zdCBkdXJhdGlvblN0ciA9IGR1cmF0aW9uLnRvRml4ZWQoMyk7XG4gICAgcmV0dXJuIGAgICAgICAke1N0YXR1c1N5bWJvbFtzdGF0dXNdfSAke25hbWV9ICR7ZHVyYXRpb25TdHJ9cyAke1N0YXR1c01lc3NhZ2Vbc3RhdHVzXX1gO1xuICB9XG59XG5cbi8vIFRPRE86IFVzZSBhIHByb3BlcnR5IGluaXRpYWxpemVyIHdoZW4gc3VwcG9ydGVkIGJ5IEZsb3cuXG5UZXN0UnVuTW9kZWwuU3RhdHVzID0gU3RhdHVzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRlc3RSdW5Nb2RlbDtcbiJdfQ==