var _HgStatusToFileChangeStatus, _FileChangeStatusToPrefix;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var HgStatusCodeNumber = require('../../hg-repository-base').hgConstants.StatusCodeNumber;

var GK_DIFF_VIEW_PUBLISH = 'nuclide_diff_view_publish';
var TOOLBAR_VISIBLE_SETTING = 'nuclide-diff-view.toolbarVisible';

var FileChangeStatus = {
  ADDED: 1,
  MODIFIED: 2,
  MISSING: 3,
  REMOVED: 4,
  UNTRACKED: 5
};

var DiffMode = {
  BROWSE_MODE: 'Browse',
  COMMIT_MODE: 'Commit',
  PUBLISH_MODE: 'Publish'
};

// This is to work around flow's missing support of enums.
DiffMode;

var CommitMode = {
  COMMIT: 'Commit',
  AMEND: 'Amend'
};

// This is to work around flow's missing support of enums.
CommitMode;

var CommitModeState = {
  READY: 'Ready',
  LOADING_COMMIT_MESSAGE: 'Loading Commit Message',
  AWAITING_COMMIT: 'Awaiting Commit'
};

// This is to work around flow's missing support of enums.
CommitModeState;

var PublishMode = {
  CREATE: 'Create',
  UPDATE: 'Update'
};

// This is to work around flow's missing support of enums.
PublishMode;

var PublishModeState = {
  READY: 'Ready',
  LOADING_PUBLISH_MESSAGE: 'Loading Publish Message',
  AWAITING_PUBLISH: 'Awaiting Publish'
};

// This is to work around flow's missing support of enums.
PublishModeState;

var HgStatusToFileChangeStatus = (_HgStatusToFileChangeStatus = {}, _defineProperty(_HgStatusToFileChangeStatus, HgStatusCodeNumber.ADDED, FileChangeStatus.ADDED), _defineProperty(_HgStatusToFileChangeStatus, HgStatusCodeNumber.MODIFIED, FileChangeStatus.MODIFIED), _defineProperty(_HgStatusToFileChangeStatus, HgStatusCodeNumber.MISSING, FileChangeStatus.MISSING), _defineProperty(_HgStatusToFileChangeStatus, HgStatusCodeNumber.REMOVED, FileChangeStatus.REMOVED), _defineProperty(_HgStatusToFileChangeStatus, HgStatusCodeNumber.UNTRACKED, FileChangeStatus.UNTRACKED), _HgStatusToFileChangeStatus);

var FileChangeStatusToPrefix = (_FileChangeStatusToPrefix = {}, _defineProperty(_FileChangeStatusToPrefix, FileChangeStatus.ADDED, '[A] '), _defineProperty(_FileChangeStatusToPrefix, FileChangeStatus.MODIFIED, '[M] '), _defineProperty(_FileChangeStatusToPrefix, FileChangeStatus.MISSING, '[!] '), _defineProperty(_FileChangeStatusToPrefix, FileChangeStatus.REMOVED, '[D] '), _defineProperty(_FileChangeStatusToPrefix, FileChangeStatus.UNTRACKED, '[?] '), _FileChangeStatusToPrefix);

module.exports = {
  DiffMode: DiffMode,
  CommitMode: CommitMode,
  CommitModeState: CommitModeState,
  PublishMode: PublishMode,
  PublishModeState: PublishModeState,
  FileChangeStatus: FileChangeStatus,
  HgStatusToFileChangeStatus: HgStatusToFileChangeStatus,
  FileChangeStatusToPrefix: FileChangeStatusToPrefix,
  HgStatusCodeNumber: HgStatusCodeNumber,
  GK_DIFF_VIEW_PUBLISH: GK_DIFF_VIEW_PUBLISH,
  TOOLBAR_VISIBLE_SETTING: TOOLBAR_VISIBLE_SETTING
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnN0YW50cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7SUFXeUIsa0JBQWtCLEdBQUksT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUMsV0FBVyxDQUF2RixnQkFBZ0I7O0FBWXZCLElBQU0sb0JBQTRCLEdBQUcsMkJBQTJCLENBQUM7QUFDakUsSUFBTSx1QkFBK0IsR0FBRyxrQ0FBa0MsQ0FBQzs7QUFFM0UsSUFBTSxnQkFBd0QsR0FBRztBQUMvRCxPQUFLLEVBQUUsQ0FBQztBQUNSLFVBQVEsRUFBRSxDQUFDO0FBQ1gsU0FBTyxFQUFFLENBQUM7QUFDVixTQUFPLEVBQUUsQ0FBQztBQUNWLFdBQVMsRUFBRSxDQUFDO0NBQ2IsQ0FBQzs7QUFFRixJQUFNLFFBQVEsR0FBRztBQUNmLGFBQVcsRUFBRSxRQUFRO0FBQ3JCLGFBQVcsRUFBRSxRQUFRO0FBQ3JCLGNBQVksRUFBRSxTQUFTO0NBQ3hCLENBQUM7OztBQUdGLEFBQUMsUUFBUSxDQUFtQzs7QUFFNUMsSUFBTSxVQUFVLEdBQUc7QUFDakIsUUFBTSxFQUFFLFFBQVE7QUFDaEIsT0FBSyxFQUFFLE9BQU87Q0FDZixDQUFDOzs7QUFHRixBQUFDLFVBQVUsQ0FBcUM7O0FBRWhELElBQU0sZUFBZSxHQUFHO0FBQ3RCLE9BQUssRUFBRSxPQUFPO0FBQ2Qsd0JBQXNCLEVBQUUsd0JBQXdCO0FBQ2hELGlCQUFlLEVBQUUsaUJBQWlCO0NBQ25DLENBQUM7OztBQUdGLEFBQUMsZUFBZSxDQUEwQzs7QUFFMUQsSUFBTSxXQUFXLEdBQUc7QUFDbEIsUUFBTSxFQUFFLFFBQVE7QUFDaEIsUUFBTSxFQUFFLFFBQVE7Q0FDakIsQ0FBQzs7O0FBR0YsQUFBQyxXQUFXLENBQXNDOztBQUVsRCxJQUFNLGdCQUFnQixHQUFHO0FBQ3ZCLE9BQUssRUFBRSxPQUFPO0FBQ2QseUJBQXVCLEVBQUUseUJBQXlCO0FBQ2xELGtCQUFnQixFQUFFLGtCQUFrQjtDQUNyQyxDQUFDOzs7QUFHRixBQUFDLGdCQUFnQixDQUEyQzs7QUFHNUQsSUFBTSwwQkFBa0YsbUZBQ3JGLGtCQUFrQixDQUFDLEtBQUssRUFBRyxnQkFBZ0IsQ0FBQyxLQUFLLGdEQUNqRCxrQkFBa0IsQ0FBQyxRQUFRLEVBQUcsZ0JBQWdCLENBQUMsUUFBUSxnREFDdkQsa0JBQWtCLENBQUMsT0FBTyxFQUFHLGdCQUFnQixDQUFDLE9BQU8sZ0RBQ3JELGtCQUFrQixDQUFDLE9BQU8sRUFBRyxnQkFBZ0IsQ0FBQyxPQUFPLGdEQUNyRCxrQkFBa0IsQ0FBQyxTQUFTLEVBQUcsZ0JBQWdCLENBQUMsU0FBUywrQkFDM0QsQ0FBQzs7QUFFRixJQUFNLHdCQUFnRSwrRUFDbkUsZ0JBQWdCLENBQUMsS0FBSyxFQUFHLE1BQU0sOENBQy9CLGdCQUFnQixDQUFDLFFBQVEsRUFBRyxNQUFNLDhDQUNsQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUcsTUFBTSw4Q0FDakMsZ0JBQWdCLENBQUMsT0FBTyxFQUFHLE1BQU0sOENBQ2pDLGdCQUFnQixDQUFDLFNBQVMsRUFBRyxNQUFNLDZCQUNyQyxDQUFDOztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZixVQUFRLEVBQVIsUUFBUTtBQUNSLFlBQVUsRUFBVixVQUFVO0FBQ1YsaUJBQWUsRUFBZixlQUFlO0FBQ2YsYUFBVyxFQUFYLFdBQVc7QUFDWCxrQkFBZ0IsRUFBaEIsZ0JBQWdCO0FBQ2hCLGtCQUFnQixFQUFoQixnQkFBZ0I7QUFDaEIsNEJBQTBCLEVBQTFCLDBCQUEwQjtBQUMxQiwwQkFBd0IsRUFBeEIsd0JBQXdCO0FBQ3hCLG9CQUFrQixFQUFsQixrQkFBa0I7QUFDbEIsc0JBQW9CLEVBQXBCLG9CQUFvQjtBQUNwQix5QkFBdUIsRUFBdkIsdUJBQXVCO0NBQ3hCLENBQUMiLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuY29uc3Qge1N0YXR1c0NvZGVOdW1iZXI6IEhnU3RhdHVzQ29kZU51bWJlcn0gPSByZXF1aXJlKCcuLi8uLi9oZy1yZXBvc2l0b3J5LWJhc2UnKS5oZ0NvbnN0YW50cztcblxuaW1wb3J0IHR5cGUge1N0YXR1c0NvZGVOdW1iZXJWYWx1ZX0gZnJvbSAnLi4vLi4vaGctcmVwb3NpdG9yeS1iYXNlL2xpYi9IZ1NlcnZpY2UnO1xuaW1wb3J0IHR5cGUge1xuICBDb21taXRNb2RlVHlwZSxcbiAgQ29tbWl0TW9kZVN0YXRlVHlwZSxcbiAgRGlmZk1vZGVUeXBlLFxuICBGaWxlQ2hhbmdlU3RhdHVzVmFsdWUsXG4gIFB1Ymxpc2hNb2RlVHlwZSxcbiAgUHVibGlzaE1vZGVTdGF0ZVR5cGUsXG59IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBHS19ESUZGX1ZJRVdfUFVCTElTSDogc3RyaW5nID0gJ251Y2xpZGVfZGlmZl92aWV3X3B1Ymxpc2gnO1xuY29uc3QgVE9PTEJBUl9WSVNJQkxFX1NFVFRJTkc6IHN0cmluZyA9ICdudWNsaWRlLWRpZmYtdmlldy50b29sYmFyVmlzaWJsZSc7XG5cbmNvbnN0IEZpbGVDaGFuZ2VTdGF0dXM6IHtba2V5OiBzdHJpbmddOiBGaWxlQ2hhbmdlU3RhdHVzVmFsdWV9ID0ge1xuICBBRERFRDogMSxcbiAgTU9ESUZJRUQ6IDIsXG4gIE1JU1NJTkc6IDMsXG4gIFJFTU9WRUQ6IDQsXG4gIFVOVFJBQ0tFRDogNSxcbn07XG5cbmNvbnN0IERpZmZNb2RlID0ge1xuICBCUk9XU0VfTU9ERTogJ0Jyb3dzZScsXG4gIENPTU1JVF9NT0RFOiAnQ29tbWl0JyxcbiAgUFVCTElTSF9NT0RFOiAnUHVibGlzaCcsXG59O1xuXG4vLyBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGZsb3cncyBtaXNzaW5nIHN1cHBvcnQgb2YgZW51bXMuXG4oRGlmZk1vZGU6IHsgW2tleTogc3RyaW5nXTogRGlmZk1vZGVUeXBlIH0pO1xuXG5jb25zdCBDb21taXRNb2RlID0ge1xuICBDT01NSVQ6ICdDb21taXQnLFxuICBBTUVORDogJ0FtZW5kJyxcbn07XG5cbi8vIFRoaXMgaXMgdG8gd29yayBhcm91bmQgZmxvdydzIG1pc3Npbmcgc3VwcG9ydCBvZiBlbnVtcy5cbihDb21taXRNb2RlOiB7IFtrZXk6IHN0cmluZ106IENvbW1pdE1vZGVUeXBlIH0pO1xuXG5jb25zdCBDb21taXRNb2RlU3RhdGUgPSB7XG4gIFJFQURZOiAnUmVhZHknLFxuICBMT0FESU5HX0NPTU1JVF9NRVNTQUdFOiAnTG9hZGluZyBDb21taXQgTWVzc2FnZScsXG4gIEFXQUlUSU5HX0NPTU1JVDogJ0F3YWl0aW5nIENvbW1pdCcsXG59O1xuXG4vLyBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGZsb3cncyBtaXNzaW5nIHN1cHBvcnQgb2YgZW51bXMuXG4oQ29tbWl0TW9kZVN0YXRlOiB7IFtrZXk6IHN0cmluZ106IENvbW1pdE1vZGVTdGF0ZVR5cGUgfSk7XG5cbmNvbnN0IFB1Ymxpc2hNb2RlID0ge1xuICBDUkVBVEU6ICdDcmVhdGUnLFxuICBVUERBVEU6ICdVcGRhdGUnLFxufTtcblxuLy8gVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBmbG93J3MgbWlzc2luZyBzdXBwb3J0IG9mIGVudW1zLlxuKFB1Ymxpc2hNb2RlOiB7IFtrZXk6IHN0cmluZ106IFB1Ymxpc2hNb2RlVHlwZSB9KTtcblxuY29uc3QgUHVibGlzaE1vZGVTdGF0ZSA9IHtcbiAgUkVBRFk6ICdSZWFkeScsXG4gIExPQURJTkdfUFVCTElTSF9NRVNTQUdFOiAnTG9hZGluZyBQdWJsaXNoIE1lc3NhZ2UnLFxuICBBV0FJVElOR19QVUJMSVNIOiAnQXdhaXRpbmcgUHVibGlzaCcsXG59O1xuXG4vLyBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGZsb3cncyBtaXNzaW5nIHN1cHBvcnQgb2YgZW51bXMuXG4oUHVibGlzaE1vZGVTdGF0ZTogeyBba2V5OiBzdHJpbmddOiBQdWJsaXNoTW9kZVN0YXRlVHlwZSB9KTtcblxuXG5jb25zdCBIZ1N0YXR1c1RvRmlsZUNoYW5nZVN0YXR1cyA6IHtba2V5OiBTdGF0dXNDb2RlTnVtYmVyVmFsdWVdOiBGaWxlQ2hhbmdlU3RhdHVzVmFsdWV9ID0ge1xuICBbSGdTdGF0dXNDb2RlTnVtYmVyLkFEREVEXTogRmlsZUNoYW5nZVN0YXR1cy5BRERFRCxcbiAgW0hnU3RhdHVzQ29kZU51bWJlci5NT0RJRklFRF06IEZpbGVDaGFuZ2VTdGF0dXMuTU9ESUZJRUQsXG4gIFtIZ1N0YXR1c0NvZGVOdW1iZXIuTUlTU0lOR106IEZpbGVDaGFuZ2VTdGF0dXMuTUlTU0lORyxcbiAgW0hnU3RhdHVzQ29kZU51bWJlci5SRU1PVkVEXTogRmlsZUNoYW5nZVN0YXR1cy5SRU1PVkVELFxuICBbSGdTdGF0dXNDb2RlTnVtYmVyLlVOVFJBQ0tFRF06IEZpbGVDaGFuZ2VTdGF0dXMuVU5UUkFDS0VELFxufTtcblxuY29uc3QgRmlsZUNoYW5nZVN0YXR1c1RvUHJlZml4OiB7W2tleTogRmlsZUNoYW5nZVN0YXR1c1ZhbHVlXTogc3RyaW5nfSA9IHtcbiAgW0ZpbGVDaGFuZ2VTdGF0dXMuQURERURdOiAnW0FdICcsXG4gIFtGaWxlQ2hhbmdlU3RhdHVzLk1PRElGSUVEXTogJ1tNXSAnLFxuICBbRmlsZUNoYW5nZVN0YXR1cy5NSVNTSU5HXTogJ1shXSAnLFxuICBbRmlsZUNoYW5nZVN0YXR1cy5SRU1PVkVEXTogJ1tEXSAnLFxuICBbRmlsZUNoYW5nZVN0YXR1cy5VTlRSQUNLRURdOiAnWz9dICcsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRGlmZk1vZGUsXG4gIENvbW1pdE1vZGUsXG4gIENvbW1pdE1vZGVTdGF0ZSxcbiAgUHVibGlzaE1vZGUsXG4gIFB1Ymxpc2hNb2RlU3RhdGUsXG4gIEZpbGVDaGFuZ2VTdGF0dXMsXG4gIEhnU3RhdHVzVG9GaWxlQ2hhbmdlU3RhdHVzLFxuICBGaWxlQ2hhbmdlU3RhdHVzVG9QcmVmaXgsXG4gIEhnU3RhdHVzQ29kZU51bWJlcixcbiAgR0tfRElGRl9WSUVXX1BVQkxJU0gsXG4gIFRPT0xCQVJfVklTSUJMRV9TRVRUSU5HLFxufTtcbiJdfQ==