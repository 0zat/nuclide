function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _featureConfig = require('../../feature-config');

var _featureConfig2 = _interopRequireDefault(_featureConfig);

var _client = require('../../client');

var _analytics = require('../../analytics');

var _constantsJs = require('./constants.js');

var invariant = require('assert');

var _require = require('atom');

var CompositeDisposable = _require.CompositeDisposable;

var GRAMMARS_STRING = _constantsJs.JS_GRAMMARS.join(', ');
var diagnosticsOnFlySetting = 'nuclide-flow.diagnosticsOnFly';

var PACKAGE_NAME = 'nuclide-flow';

var busySignalProvider = undefined;

var flowDiagnosticsProvider = undefined;

var disposables = undefined;

module.exports = {
  activate: function activate() {
    if (!disposables) {
      disposables = new CompositeDisposable();

      var _require2 = require('./FlowServiceWatcher');

      var FlowServiceWatcher = _require2.FlowServiceWatcher;

      var watcher = new FlowServiceWatcher();
      disposables.add(watcher);

      disposables.add(atom.commands.add(atom.views.getView(atom.workspace), 'nuclide-flow:restart-flow-server', allowFlowServerRestart));

      var _require3 = require('../../atom-helpers');

      var registerGrammarForFileExtension = _require3.registerGrammarForFileExtension;

      registerGrammarForFileExtension('source.ini', '.flowconfig');
    }
  },

  /** Provider for autocomplete service. */
  createAutocompleteProvider: function createAutocompleteProvider() {
    var AutocompleteProvider = require('./FlowAutocompleteProvider');
    var autocompleteProvider = new AutocompleteProvider();
    var getSuggestions = autocompleteProvider.getSuggestions.bind(autocompleteProvider);
    return {
      selector: _constantsJs.JS_GRAMMARS.map(function (grammar) {
        return '.' + grammar;
      }).join(', '),
      disableForSelector: '.source.js .comment',
      inclusionPriority: 1,
      // We want to get ranked higher than the snippets provider.
      suggestionPriority: 5,
      onDidInsertSuggestion: function onDidInsertSuggestion() {
        (0, _analytics.track)('nuclide-flow.autocomplete-chosen');
      },
      getSuggestions: getSuggestions
    };
  },

  getHyperclickProvider: function getHyperclickProvider() {
    var FlowHyperclickProvider = require('./FlowHyperclickProvider');
    var flowHyperclickProvider = new FlowHyperclickProvider();
    var getSuggestionForWord = flowHyperclickProvider.getSuggestionForWord.bind(flowHyperclickProvider);
    return {
      wordRegExp: _constantsJs.JAVASCRIPT_WORD_REGEX,
      priority: 20,
      providerName: PACKAGE_NAME,
      getSuggestionForWord: getSuggestionForWord
    };
  },

  provideBusySignal: function provideBusySignal() {
    if (!busySignalProvider) {
      var _require4 = require('../../busy-signal-provider-base');

      var DedupedBusySignalProviderBase = _require4.DedupedBusySignalProviderBase;

      busySignalProvider = new DedupedBusySignalProviderBase();
    }
    return busySignalProvider;
  },

  provideDiagnostics: function provideDiagnostics() {
    if (!flowDiagnosticsProvider) {
      var busyProvider = this.provideBusySignal();
      var FlowDiagnosticsProvider = require('./FlowDiagnosticsProvider');
      var runOnTheFly = _featureConfig2['default'].get(diagnosticsOnFlySetting);
      flowDiagnosticsProvider = new FlowDiagnosticsProvider(runOnTheFly, busyProvider);
      invariant(disposables);
      disposables.add(_featureConfig2['default'].observe(diagnosticsOnFlySetting, function (newValue) {
        invariant(flowDiagnosticsProvider);
        flowDiagnosticsProvider.setRunOnTheFly(newValue);
      }));

      var _require5 = require('../../atom-helpers');

      var projects = _require5.projects;

      disposables.add(projects.onDidRemoveProjectPath(function (projectPath) {
        invariant(flowDiagnosticsProvider);
        flowDiagnosticsProvider.invalidateProjectPath(projectPath);
      }));
    }
    return flowDiagnosticsProvider;
  },

  provideOutlines: function provideOutlines() {
    var _require6 = require('./FlowOutlineProvider');

    var FlowOutlineProvider = _require6.FlowOutlineProvider;

    var provider = new FlowOutlineProvider();
    return {
      grammarScopes: _constantsJs.JS_GRAMMARS,
      priority: 1,
      name: 'Flow',
      getOutline: provider.getOutline.bind(provider)
    };
  },

  createTypeHintProvider: function createTypeHintProvider() {
    var _require7 = require('./FlowTypeHintProvider');

    var FlowTypeHintProvider = _require7.FlowTypeHintProvider;

    var flowTypeHintProvider = new FlowTypeHintProvider();
    var typeHint = flowTypeHintProvider.typeHint.bind(flowTypeHintProvider);
    return {
      selector: GRAMMARS_STRING,
      providerName: PACKAGE_NAME,
      inclusionPriority: 1,
      typeHint: typeHint
    };
  },

  deactivate: function deactivate() {
    // TODO(mbolin): Find a way to unregister the autocomplete provider from
    // ServiceHub, or set a boolean in the autocomplete provider to always return
    // empty results.
    var service = (0, _client.getServiceByNuclideUri)('FlowService');
    invariant(service);
    service.dispose();
    if (disposables) {
      disposables.dispose();
      disposables = null;
    }
    if (flowDiagnosticsProvider) {
      flowDiagnosticsProvider.dispose();
      flowDiagnosticsProvider = null;
    }
  }
};

function allowFlowServerRestart() {
  var _require8 = require('./FlowServiceFactory');

  var getCurrentServiceInstances = _require8.getCurrentServiceInstances;

  for (var service of getCurrentServiceInstances()) {
    service.allowServerRestart();
  }
}
//# sourceMappingURL=data:application/json;base64,