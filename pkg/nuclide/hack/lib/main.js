function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _CodeHighlightProvider = require('./CodeHighlightProvider');

var _CodeHighlightProvider2 = _interopRequireDefault(_CodeHighlightProvider);

var _atom = require('atom');

var _hackCommonLibConstants = require('../../hack-common/lib/constants');

var _config = require('./config');

var _TypeCoverageProvider = require('./TypeCoverageProvider');

var _featureConfig = require('../../feature-config');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var HACK_GRAMMARS_STRING = _hackCommonLibConstants.HACK_GRAMMARS.join(', ');
var PACKAGE_NAME = 'nuclide-hack';

var subscriptions = null;
var hackDiagnosticsProvider = undefined;
var busySignalProvider = undefined;
var hackTypeCoverageProviderSubscription = null;
var coverageProvider = null;

module.exports = {

  activate: function activate() {
    var _require = require('./hack');

    var getCachedHackLanguageForUri = _require.getCachedHackLanguageForUri;

    var _require2 = require('../../atom-helpers');

    var projects = _require2.projects;

    subscriptions = new _atom.CompositeDisposable();
    subscriptions.add(projects.onDidRemoveProjectPath(function (projectPath) {
      var hackLanguage = getCachedHackLanguageForUri(projectPath);
      if (hackLanguage) {
        hackLanguage.dispose();
      }
      if (hackDiagnosticsProvider) {
        hackDiagnosticsProvider.invalidateProjectPath(projectPath);
      }
    }));
    subscriptions.add((0, _featureConfig.onDidChange)(_config.SHOW_TYPE_COVERAGE_CONFIG_PATH, function (delta) {
      if (delta.newValue) {
        enableCoverageProvider();
      } else {
        disableCoverageProvider();
      }
    }));
    subscriptions.add(atom.commands.add('atom-workspace', 'nuclide-hack:toggle-type-coverage', toggleTypeCoverage));

    if ((0, _config.getShowTypeCoverage)()) {
      enableCoverageProvider();
    }
  },

  /** Provider for autocomplete service. */
  createAutocompleteProvider: function createAutocompleteProvider() {
    var AutocompleteProvider = require('./AutocompleteProvider');
    var autocompleteProvider = new AutocompleteProvider();

    return {
      selector: _hackCommonLibConstants.HACK_GRAMMARS.map(function (grammar) {
        return '.' + grammar;
      }).join(', '),
      inclusionPriority: 1,
      // The context-sensitive hack autocompletions are more relevant than snippets.
      suggestionPriority: 3,
      excludeLowerPriority: false,

      getSuggestions: function getSuggestions(request) {
        return autocompleteProvider.getAutocompleteSuggestions(request);
      }
    };
  },

  getHyperclickProvider: function getHyperclickProvider() {
    var HackHyperclickProvider = require('./HyperclickProvider');
    var hackHyperclickProvider = new HackHyperclickProvider();
    var getSuggestionForWord = hackHyperclickProvider.getSuggestionForWord.bind(hackHyperclickProvider);
    return {
      priority: 20,
      providerName: PACKAGE_NAME,
      getSuggestionForWord: getSuggestionForWord
    };
  },

  /** Provider for code format service. */
  createCodeFormatProvider: function createCodeFormatProvider() {
    var CodeFormatProvider = require('./CodeFormatProvider');
    var codeFormatProvider = new CodeFormatProvider();

    return {
      selector: HACK_GRAMMARS_STRING,
      inclusionPriority: 1,

      formatCode: function formatCode(editor, range) {
        return codeFormatProvider.formatCode(editor, range);
      }
    };
  },

  createFindReferencesProvider: function createFindReferencesProvider() {
    return require('./FindReferencesProvider');
  },

  createTypeHintProvider: function createTypeHintProvider() {
    var TypeHintProvider = require('./TypeHintProvider');
    var typeHintProvider = new TypeHintProvider();

    return {
      selector: HACK_GRAMMARS_STRING,
      inclusionPriority: 1,
      providerName: PACKAGE_NAME,

      typeHint: function typeHint(editor, position) {
        return typeHintProvider.typeHint(editor, position);
      }
    };
  },

  createCodeHighlightProvider: function createCodeHighlightProvider() {
    var codeHighlightProvider = new _CodeHighlightProvider2['default']();

    return {
      selector: HACK_GRAMMARS_STRING,
      inclusionPriority: 1,
      highlight: function highlight(editor, position) {
        return codeHighlightProvider.highlight(editor, position);
      }
    };
  },

  provideDiagnostics: function provideDiagnostics() {
    if (!hackDiagnosticsProvider) {
      var HackDiagnosticsProvider = require('./HackDiagnosticsProvider');
      var busyProvider = provideBusySignal();
      hackDiagnosticsProvider = new HackDiagnosticsProvider(false, busyProvider);
    }
    return hackDiagnosticsProvider;
  },

  deactivate: function deactivate() {
    if (subscriptions) {
      subscriptions.dispose();
      subscriptions = null;
    }
    if (hackDiagnosticsProvider) {
      hackDiagnosticsProvider.dispose();
      hackDiagnosticsProvider = null;
    }
    disableCoverageProvider();
  }
};

function provideBusySignal() {
  if (busySignalProvider == null) {
    var _require3 = require('../../busy-signal-provider-base');

    var BusySignalProviderBase = _require3.BusySignalProviderBase;

    busySignalProvider = new BusySignalProviderBase();
  }
  return busySignalProvider;
}

function enableCoverageProvider() {
  if (coverageProvider == null) {
    coverageProvider = new _TypeCoverageProvider.TypeCoverageProvider(provideBusySignal());
    (0, _assert2['default'])(hackTypeCoverageProviderSubscription == null);
    hackTypeCoverageProviderSubscription = atom.packages.serviceHub.provide('nuclide-diagnostics-provider', '0.1.0', coverageProvider);
  }
}

function disableCoverageProvider() {
  if (hackTypeCoverageProviderSubscription != null) {
    hackTypeCoverageProviderSubscription.dispose();
    hackTypeCoverageProviderSubscription = null;
  }
  if (coverageProvider != null) {
    coverageProvider.dispose();
    coverageProvider = null;
  }
}

function toggleTypeCoverage() {
  (0, _config.setShowTypeCoverage)(!(0, _config.getShowTypeCoverage)());
}
//# sourceMappingURL=data:application/json;base64,