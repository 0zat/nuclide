var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var getHackLanguageForUri = _asyncToGenerator(function* (uri) {
  if (uri == null || uri.length === 0) {
    return null;
  }
  var key = getKeyOfUri(uri);
  if (key == null) {
    return null;
  }
  return yield createHackLanguageIfNotExisting(key, uri);
});

var createHackLanguageIfNotExisting = _asyncToGenerator(function* (key, fileUri) {
  if (!uriToHackLanguage.has(key)) {
    var service = (0, _utils.getHackService)(fileUri);
    var hackEnvironment = yield service.getHackEnvironmentDetails(fileUri, getConfig().hhClientPath);
    var isHHAvailable = hackEnvironment != null;

    var _ref = hackEnvironment || {};

    var hackRoot = _ref.hackRoot;

    // If multiple calls were done asynchronously, then return the single-created HackLanguage.
    if (!uriToHackLanguage.has(key)) {
      uriToHackLanguage.set(key, new _HackLanguage2['default'](isHHAvailable, hackRoot, fileUri));
    }
  }
  return uriToHackLanguage.get(key);
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _atomHelpers = require('../../atom-helpers');

var _HackLanguage = require('./HackLanguage');

var _HackLanguage2 = _interopRequireDefault(_HackLanguage);

var _remoteUri = require('../../remote-uri');

var _atom = require('atom');

var _hackCommon = require('../../hack-common');

var _utils = require('./utils');

var _remoteConnection = require('../../remote-connection');

var _featureConfig = require('../../feature-config');

var _featureConfig2 = _interopRequireDefault(_featureConfig);

var HACK_WORD_REGEX = /[a-zA-Z0-9_$]+/g;

// Symbol types we can get references for.
var SYMBOL_TYPES_WITH_REFERENCES = new Set([_hackCommon.SymbolType.CLASS, _hackCommon.SymbolType.FUNCTION, _hackCommon.SymbolType.METHOD]);

/**
 * This is responsible for managing (creating/disposing) multiple HackLanguage instances,
 * creating the designated HackService instances with the NuclideClient it needs per remote project.
 * Also, it deelegates the language feature request to the correct HackLanguage instance.
 */
var uriToHackLanguage = new Map();

// dummy key into uriToHackLanguage for local projects.
// Any non-remote NuclideUri will do.
// TODO: I suspect we should key the local service off of the presence of a .hhconfig file
// rather than having a single HackLanguage for all local requests. Regardless, we haven't tested
// local hack services so save that for another day.
var LOCAL_URI_KEY = 'local-hack-key';

module.exports = {

  findDiagnostics: _asyncToGenerator(function* (editor) {
    var filePath = editor.getPath();
    var hackLanguage = yield getHackLanguageForUri(filePath);
    if (!hackLanguage || !filePath) {
      return [];
    }

    (0, _assert2['default'])(filePath);
    var contents = editor.getText();

    var diagnostics = undefined;
    if (hackLanguage.isHackAvailable()) {
      diagnostics = yield hackLanguage.getServerDiagnostics(filePath);
    } else {
      diagnostics = yield hackLanguage.getDiagnostics(filePath, contents);
    }
    return diagnostics;
  }),

  fetchCompletionsForEditor: _asyncToGenerator(function* (editor, prefix) {
    var hackLanguage = yield getHackLanguageForUri(editor.getPath());
    var filePath = editor.getPath();
    if (!hackLanguage || !filePath) {
      return [];
    }

    (0, _assert2['default'])(filePath);
    var contents = editor.getText();
    var cursor = editor.getLastCursor();
    var offset = editor.getBuffer().characterIndexForPosition(cursor.getBufferPosition());
    // The returned completions may have unrelated results, even though the offset is set on the end
    // of the prefix.
    var completions = yield hackLanguage.getCompletions(filePath, contents, offset);
    // Filter out the completions that do not contain the prefix as a token in the match text case
    // insentively.
    var tokenLowerCase = prefix.toLowerCase();

    var hackCompletionsCompartor = (0, _utils.compareHackCompletions)(prefix);
    return completions.filter(function (completion) {
      return completion.matchText.toLowerCase().indexOf(tokenLowerCase) >= 0;
    })
    // Sort the auto-completions based on a scoring function considering:
    // case sensitivity, position in the completion, private functions and alphabetical order.
    .sort(function (completion1, completion2) {
      return hackCompletionsCompartor(completion1.matchText, completion2.matchText);
    });
  }),

  formatSourceFromEditor: _asyncToGenerator(function* (editor, range) {
    var buffer = editor.getBuffer();
    var filePath = editor.getPath();
    var hackLanguage = yield getHackLanguageForUri(filePath);
    if (!hackLanguage || !filePath) {
      return buffer.getTextInRange(range);
    }

    var startPosition = buffer.characterIndexForPosition(range.start);
    var endPosition = buffer.characterIndexForPosition(range.end);
    return yield hackLanguage.formatSource(buffer.getText(), startPosition + 1, endPosition + 1);
  }),

  codeHighlightFromEditor: _asyncToGenerator(function* (editor, position) {
    var hackLanguage = yield getHackLanguageForUri(editor.getPath());
    if (!hackLanguage) {
      return [];
    }

    var matchData = (0, _atomHelpers.extractWordAtPosition)(editor, position, HACK_WORD_REGEX);
    if (!matchData || !matchData.wordMatch.length || !matchData.wordMatch[0].startsWith('$')) {
      return [];
    }

    return hackLanguage.highlightSource((0, _remoteUri.getPath)(editor.getPath() || ''), editor.getText(), position.row + 1, position.column);
  }),

  typeHintFromEditor: _asyncToGenerator(function* (editor, position) {
    var filePath = editor.getPath();
    var hackLanguage = yield getHackLanguageForUri(filePath);
    if (!hackLanguage || !filePath) {
      return null;
    }

    var matchData = (0, _atomHelpers.extractWordAtPosition)(editor, position, HACK_WORD_REGEX);
    if (!matchData) {
      return null;
    }

    var path = (0, _remoteUri.getPath)(filePath);
    var contents = editor.getText();

    var type = yield hackLanguage.getType(path, contents, matchData.wordMatch[0], position.row + 1, position.column + 1);
    if (!type || type === '_') {
      return null;
    } else {
      return {
        hint: type,
        range: matchData.range
      };
    }
  }),

  /**
   * If a location can be found for the declaration, the return value will
   * resolve to an object with these fields: file, line, column.
   */
  findDefinition: _asyncToGenerator(function* (editor, line, column) {
    var hackLanguage = yield getHackLanguageForUri(editor.getPath());
    var filePath = editor.getPath();
    if (!hackLanguage || !filePath) {
      return null;
    }

    var contents = editor.getText();
    var buffer = editor.getBuffer();
    var lineText = buffer.lineForRow(line);
    var positions = yield hackLanguage.getDefinition(filePath, contents, line + 1, column + 1, lineText);
    if (positions.length === 0) {
      return null;
    }
    return positions.map(function (position) {
      var range = null;
      // If the search string was expanded to include more than a valid regex php word.
      // e.g. in case of XHP tags, the start and end column are provided to underline the full range
      // to visit its definition.
      if (position.searchStartColumn && position.searchEndColumn) {
        range = new _atom.Range([line, position.searchStartColumn], [line, position.searchEndColumn]);
      }
      return _extends({}, position, {
        range: range
      });
    });
  }),

  findReferences: _asyncToGenerator(function* (editor, line, column) {
    var filePath = editor.getPath();
    var hackLanguage = yield getHackLanguageForUri(filePath);
    if (!hackLanguage || !filePath) {
      return null;
    }

    var contents = editor.getText();
    var symbol = yield hackLanguage.getSymbolNameAtPositionWithDependencies((0, _remoteUri.getPath)(filePath), contents, line + 1, column + 1);
    if (!symbol || !SYMBOL_TYPES_WITH_REFERENCES.has(symbol.type)) {
      return null;
    }
    var referencesResult = yield hackLanguage.getReferences(filePath, contents, symbol);
    if (!referencesResult) {
      return null;
    }
    var hackRoot = referencesResult.hackRoot;
    var references = referencesResult.references;

    return { baseUri: hackRoot, symbolName: symbol.name, references: references };
  }),

  isFinishedLoadingDependencies: _asyncToGenerator(function* (editor) {
    var hackLanguage = yield getHackLanguageForUri(editor.getPath());
    if (hackLanguage == null) {
      return true;
    }
    return hackLanguage.isFinishedLoadingDependencies();
  }),

  onFinishedLoadingDependencies: _asyncToGenerator(function* (editor, callback) {
    var hackLanguage = yield getHackLanguageForUri(editor.getPath());
    if (hackLanguage == null) {
      callback();
      return new _atom.Disposable(function () {});
    }
    return hackLanguage.onFinishedLoadingDependencies(callback);
  }),

  getHackLanguageForUri: getHackLanguageForUri,
  getCachedHackLanguageForUri: getCachedHackLanguageForUri
};

// Returns null if we can't get the key at this time because the RemoteConnection is initializing.
// This can happen on startup when reloading remote files.
function getKeyOfUri(uri) {
  var remoteConnection = _remoteConnection.RemoteConnection.getForUri(uri);
  return remoteConnection == null ? (0, _remoteUri.isRemote)(uri) ? null : LOCAL_URI_KEY : remoteConnection.getUriForInitialWorkingDirectory();
}

function getCachedHackLanguageForUri(uri) {
  var key = getKeyOfUri(uri);
  return key == null ? null : uriToHackLanguage.get(uri);
}

function getConfig() {
  return _featureConfig2['default'].get('nuclide-hack');
}
//# sourceMappingURL=data:application/json;base64,