var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var getHackLanguageForUri = _asyncToGenerator(function* (uri) {
  if (uri == null || uri.length === 0) {
    return null;
  }
  var key = getKeyOfUri(uri);
  if (key == null) {
    return null;
  }
  return yield createHackLanguageIfNotExisting(key, uri);
});

var createHackLanguageIfNotExisting = _asyncToGenerator(function* (key, fileUri) {
  if (!uriToHackLanguage.has(key)) {
    var hackEnvironment = yield (0, _utils.getHackService)(fileUri).getHackEnvironmentDetails(fileUri);
    var isHHAvailable = hackEnvironment != null;

    var _ref = hackEnvironment || {};

    var hackRoot = _ref.hackRoot;

    // If multiple calls were done asynchronously, then return the single-created HackLanguage.
    if (!uriToHackLanguage.has(key)) {
      uriToHackLanguage.set(key, new _HackLanguage2['default'](isHHAvailable, hackRoot, fileUri));
    }
  }
  return uriToHackLanguage.get(key);
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _atomHelpers = require('../../atom-helpers');

var _HackLanguage = require('./HackLanguage');

var _HackLanguage2 = _interopRequireDefault(_HackLanguage);

var _remoteUri = require('../../remote-uri');

var _atom = require('atom');

var _hackCommon = require('../../hack-common');

var _utils = require('./utils');

var _remoteConnection = require('../../remote-connection');

var HACK_WORD_REGEX = /[a-zA-Z0-9_$]+/g;

// Symbol types we can get references for.
var SYMBOL_TYPES_WITH_REFERENCES = new Set([_hackCommon.SymbolType.CLASS, _hackCommon.SymbolType.FUNCTION, _hackCommon.SymbolType.METHOD]);

/**
 * This is responsible for managing (creating/disposing) multiple HackLanguage instances,
 * creating the designated HackService instances with the NuclideClient it needs per remote project.
 * Also, it deelegates the language feature request to the correct HackLanguage instance.
 */
var uriToHackLanguage = new Map();

// dummy key into uriToHackLanguage for local projects.
// Any non-remote NuclideUri will do.
// TODO: I suspect we should key the local service off of the presence of a .hhconfig file
// rather than having a single HackLanguage for all local requests. Regardless, we haven't tested
// local hack services so save that for another day.
var LOCAL_URI_KEY = 'local-hack-key';

module.exports = {

  findDiagnostics: _asyncToGenerator(function* (editor) {
    var filePath = editor.getPath();
    var hackLanguage = yield getHackLanguageForUri(filePath);
    if (!hackLanguage || !filePath) {
      return [];
    }

    (0, _assert2['default'])(filePath);
    var localPath = (0, _remoteUri.getPath)(filePath);
    var contents = editor.getText();

    var diagnostics = undefined;
    if (hackLanguage.isHackAvailable()) {
      diagnostics = yield hackLanguage.getServerDiagnostics(filePath);
    } else {
      diagnostics = yield hackLanguage.getDiagnostics(localPath, contents);
    }
    return diagnostics;
  }),

  fetchCompletionsForEditor: _asyncToGenerator(function* (editor, prefix) {
    var hackLanguage = yield getHackLanguageForUri(editor.getPath());
    var filePath = editor.getPath();
    if (!hackLanguage || !filePath) {
      return [];
    }

    (0, _assert2['default'])(filePath);
    var contents = editor.getText();
    var cursor = editor.getLastCursor();
    var offset = editor.getBuffer().characterIndexForPosition(cursor.getBufferPosition());
    // The returned completions may have unrelated results, even though the offset is set on the end of the prefix.
    var completions = yield hackLanguage.getCompletions(filePath, contents, offset);
    // Filter out the completions that do not contain the prefix as a token in the match text case insentively.
    var tokenLowerCase = prefix.toLowerCase();

    var hackCompletionsCompartor = (0, _utils.compareHackCompletions)(prefix);
    return completions.filter(function (completion) {
      return completion.matchText.toLowerCase().indexOf(tokenLowerCase) >= 0;
    })
    // Sort the auto-completions based on a scoring function considering:
    // case sensitivity, position in the completion, private functions and alphabetical order.
    .sort(function (completion1, completion2) {
      return hackCompletionsCompartor(completion1.matchText, completion2.matchText);
    });
  }),

  formatSourceFromEditor: _asyncToGenerator(function* (editor, range) {
    var buffer = editor.getBuffer();
    var filePath = editor.getPath();
    var hackLanguage = yield getHackLanguageForUri(filePath);
    if (!hackLanguage || !filePath) {
      return buffer.getTextInRange(range);
    }

    var startPosition = buffer.characterIndexForPosition(range.start);
    var endPosition = buffer.characterIndexForPosition(range.end);
    return yield hackLanguage.formatSource(buffer.getText(), startPosition + 1, endPosition + 1);
  }),

  codeHighlightFromEditor: _asyncToGenerator(function* (editor, position) {
    var hackLanguage = yield getHackLanguageForUri(editor.getPath());
    if (!hackLanguage) {
      return [];
    }

    var matchData = (0, _atomHelpers.extractWordAtPosition)(editor, position, HACK_WORD_REGEX);
    if (!matchData || !matchData.wordMatch.length || !matchData.wordMatch[0].startsWith('$')) {
      return [];
    }

    return hackLanguage.highlightSource((0, _remoteUri.getPath)(editor.getPath() || ''), editor.getText(), position.row + 1, position.column);
  }),

  typeHintFromEditor: _asyncToGenerator(function* (editor, position) {
    var filePath = editor.getPath();
    var hackLanguage = yield getHackLanguageForUri(filePath);
    if (!hackLanguage || !filePath) {
      return null;
    }

    var matchData = (0, _atomHelpers.extractWordAtPosition)(editor, position, HACK_WORD_REGEX);
    if (!matchData) {
      return null;
    }

    var path = (0, _remoteUri.getPath)(filePath);
    var contents = editor.getText();

    var type = yield hackLanguage.getType(path, contents, matchData.wordMatch[0], position.row + 1, position.column + 1);
    if (!type || type === '_') {
      return null;
    } else {
      return {
        hint: type,
        range: matchData.range
      };
    }
  }),

  /**
   * If a location can be found for the declaration, the return value will
   * resolve to an object with these fields: file, line, column.
   */
  findDefinition: _asyncToGenerator(function* (editor, line, column) {
    var hackLanguage = yield getHackLanguageForUri(editor.getPath());
    var filePath = editor.getPath();
    if (!hackLanguage || !filePath) {
      return null;
    }

    var contents = editor.getText();
    var buffer = editor.getBuffer();
    var lineText = buffer.lineForRow(line);
    var positions = yield hackLanguage.getDefinition(filePath, contents, line + 1, column + 1, lineText);
    if (positions.length === 0) {
      return null;
    }
    return positions.map(function (position) {
      var range = null;
      // If the search string was expanded to include more than a valid regex php word.
      // e.g. in case of XHP tags, the start and end column are provided to underline the full range
      // to visit its definition.
      if (position.searchStartColumn && position.searchEndColumn) {
        range = new _atom.Range([line, position.searchStartColumn], [line, position.searchEndColumn]);
      }
      return _extends({}, position, {
        range: range
      });
    });
  }),

  findReferences: _asyncToGenerator(function* (editor, line, column) {
    var filePath = editor.getPath();
    var hackLanguage = yield getHackLanguageForUri(filePath);
    if (!hackLanguage || !filePath) {
      return null;
    }

    var contents = editor.getText();
    var symbol = yield hackLanguage.getSymbolNameAtPositionWithDependencies((0, _remoteUri.getPath)(filePath), contents, line + 1, column + 1);
    if (!symbol || !SYMBOL_TYPES_WITH_REFERENCES.has(symbol.type)) {
      return null;
    }
    var referencesResult = yield hackLanguage.getReferences(filePath, contents, symbol);
    if (!referencesResult) {
      return null;
    }
    var hackRoot = referencesResult.hackRoot;
    var references = referencesResult.references;

    return { baseUri: hackRoot, symbolName: symbol.name, references: references };
  }),

  isFinishedLoadingDependencies: _asyncToGenerator(function* (editor) {
    var hackLanguage = yield getHackLanguageForUri(editor.getPath());
    if (hackLanguage == null) {
      return true;
    }
    return hackLanguage.isFinishedLoadingDependencies();
  }),

  onFinishedLoadingDependencies: _asyncToGenerator(function* (editor, callback) {
    var hackLanguage = yield getHackLanguageForUri(editor.getPath());
    if (hackLanguage == null) {
      callback();
      return new _atom.Disposable(function () {});
    }
    return hackLanguage.onFinishedLoadingDependencies(callback);
  }),

  getHackLanguageForUri: getHackLanguageForUri,
  getCachedHackLanguageForUri: getCachedHackLanguageForUri
};

// Returns null if we can't get the key at this time because the RemoteConnection is initializing.
// This can happen on startup when reloading remote files.
function getKeyOfUri(uri) {
  var remoteConnection = _remoteConnection.RemoteConnection.getForUri(uri);
  return remoteConnection == null ? (0, _remoteUri.isRemote)(uri) ? null : LOCAL_URI_KEY : remoteConnection.getUriForInitialWorkingDirectory();
}

function getCachedHackLanguageForUri(uri) {
  var key = getKeyOfUri(uri);
  return key == null ? null : uriToHackLanguage.get(uri);
}
//# sourceMappingURL=data:application/json;base64,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O0FBQ3hCLGFBQU8sSUFBSSxDQUFDO0tBQ2I7QUFDRCxXQUFPLFlBQVksQ0FBQyw2QkFBNkIsRUFBRSxDQUFDO0dBQ3JELENBQUE7O0FBRUQsQUFBTSwrQkFBNkIsb0JBQUEsV0FDakMsTUFBdUIsRUFDdkIsUUFBdUIsRUFDRztBQUMxQixRQUFNLFlBQVksR0FBRyxNQUFNLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQ25FLFFBQUksWUFBWSxJQUFJLElBQUksRUFBRTtBQUN4QixjQUFRLEVBQUUsQ0FBQztBQUNYLGFBQU8scUJBQWUsWUFBTSxFQUFFLENBQUMsQ0FBQztLQUNqQztBQUNELFdBQU8sWUFBWSxDQUFDLDZCQUE2QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQzdELENBQUE7O0FBRUQsdUJBQXFCLEVBQXJCLHFCQUFxQjtBQUNyQiw2QkFBMkIsRUFBM0IsMkJBQTJCO0NBQzVCLENBQUM7Ozs7QUFJRixTQUFTLFdBQVcsQ0FBQyxHQUFlLEVBQVc7QUFDN0MsTUFBTSxnQkFBZ0IsR0FBRyxtQ0FBaUIsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pELFNBQU8sZ0JBQWdCLElBQUksSUFBSSxHQUM1Qix5QkFBUyxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsYUFBYSxHQUNyQyxnQkFBZ0IsQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDO0NBQ3ZEOztBQUVELFNBQVMsMkJBQTJCLENBQUMsR0FBZSxFQUFpQjtBQUNuRSxNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDN0IsU0FBTyxHQUFHLElBQUksSUFBSSxHQUFHLElBQUksR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDeEQiLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB0eXBlIHtOdWNsaWRlVXJpfSBmcm9tICcuLi8uLi9yZW1vdGUtdXJpJztcbmltcG9ydCB0eXBlIHtIYWNrUmVmZXJlbmNlfSBmcm9tICcuLi8uLi9oYWNrLWJhc2UvbGliL3R5cGVzJztcbmltcG9ydCB0eXBlIHtUeXBlSGludH0gZnJvbSAnLi4vLi4vdHlwZS1oaW50LWludGVyZmFjZXMnO1xuaW1wb3J0IHR5cGUge0hhY2tEaWFnbm9zdGljfSBmcm9tICcuLi8uLi9oYWNrLWJhc2UvbGliL3R5cGVzJztcblxuXG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2Fzc2VydCc7XG5pbXBvcnQge2V4dHJhY3RXb3JkQXRQb3NpdGlvbn0gZnJvbSAnLi4vLi4vYXRvbS1oZWxwZXJzJztcbmltcG9ydCBIYWNrTGFuZ3VhZ2UgZnJvbSAnLi9IYWNrTGFuZ3VhZ2UnO1xuaW1wb3J0IHtnZXRQYXRoLCBpc1JlbW90ZX0gZnJvbSAnLi4vLi4vcmVtb3RlLXVyaSc7XG5pbXBvcnQge0Rpc3Bvc2FibGUsIFJhbmdlfSBmcm9tICdhdG9tJztcbmltcG9ydCB7U3ltYm9sVHlwZX0gZnJvbSAnLi4vLi4vaGFjay1jb21tb24nO1xuaW1wb3J0IHtnZXRIYWNrU2VydmljZX0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQge1JlbW90ZUNvbm5lY3Rpb259IGZyb20gJy4uLy4uL3JlbW90ZS1jb25uZWN0aW9uJztcbmltcG9ydCB7Y29tcGFyZUhhY2tDb21wbGV0aW9uc30gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IEhBQ0tfV09SRF9SRUdFWCA9IC9bYS16QS1aMC05XyRdKy9nO1xuXG4vLyBTeW1ib2wgdHlwZXMgd2UgY2FuIGdldCByZWZlcmVuY2VzIGZvci5cbmNvbnN0IFNZTUJPTF9UWVBFU19XSVRIX1JFRkVSRU5DRVMgPSBuZXcgU2V0KFtcbiAgU3ltYm9sVHlwZS5DTEFTUyxcbiAgU3ltYm9sVHlwZS5GVU5DVElPTixcbiAgU3ltYm9sVHlwZS5NRVRIT0QsXG5dKTtcblxuXG4vKipcbiAqIFRoaXMgaXMgcmVzcG9uc2libGUgZm9yIG1hbmFnaW5nIChjcmVhdGluZy9kaXNwb3NpbmcpIG11bHRpcGxlIEhhY2tMYW5ndWFnZSBpbnN0YW5jZXMsXG4gKiBjcmVhdGluZyB0aGUgZGVzaWduYXRlZCBIYWNrU2VydmljZSBpbnN0YW5jZXMgd2l0aCB0aGUgTnVjbGlkZUNsaWVudCBpdCBuZWVkcyBwZXIgcmVtb3RlIHByb2plY3QuXG4gKiBBbHNvLCBpdCBkZWVsZWdhdGVzIHRoZSBsYW5ndWFnZSBmZWF0dXJlIHJlcXVlc3QgdG8gdGhlIGNvcnJlY3QgSGFja0xhbmd1YWdlIGluc3RhbmNlLlxuICovXG5jb25zdCB1cmlUb0hhY2tMYW5ndWFnZTogTWFwPHN0cmluZywgSGFja0xhbmd1YWdlPiA9IG5ldyBNYXAoKTtcblxuLy8gZHVtbXkga2V5IGludG8gdXJpVG9IYWNrTGFuZ3VhZ2UgZm9yIGxvY2FsIHByb2plY3RzLlxuLy8gQW55IG5vbi1yZW1vdGUgTnVjbGlkZVVyaSB3aWxsIGRvLlxuLy8gVE9ETzogSSBzdXNwZWN0IHdlIHNob3VsZCBrZXkgdGhlIGxvY2FsIHNlcnZpY2Ugb2ZmIG9mIHRoZSBwcmVzZW5jZSBvZiBhIC5oaGNvbmZpZyBmaWxlXG4vLyByYXRoZXIgdGhhbiBoYXZpbmcgYSBzaW5nbGUgSGFja0xhbmd1YWdlIGZvciBhbGwgbG9jYWwgcmVxdWVzdHMuIFJlZ2FyZGxlc3MsIHdlIGhhdmVuJ3QgdGVzdGVkXG4vLyBsb2NhbCBoYWNrIHNlcnZpY2VzIHNvIHNhdmUgdGhhdCBmb3IgYW5vdGhlciBkYXkuXG5jb25zdCBMT0NBTF9VUklfS0VZID0gJ2xvY2FsLWhhY2sta2V5JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgYXN5bmMgZmluZERpYWdub3N0aWNzKFxuICAgIGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yLFxuICApOiBQcm9taXNlPEFycmF5PHttZXNzYWdlOiBIYWNrRGlhZ25vc3RpYzt9Pj4ge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gZWRpdG9yLmdldFBhdGgoKTtcbiAgICBjb25zdCBoYWNrTGFuZ3VhZ2UgPSBhd2FpdCBnZXRIYWNrTGFuZ3VhZ2VGb3JVcmkoZmlsZVBhdGgpO1xuICAgIGlmICghaGFja0xhbmd1YWdlIHx8ICFmaWxlUGF0aCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGludmFyaWFudChmaWxlUGF0aCk7XG4gICAgY29uc3QgbG9jYWxQYXRoID0gZ2V0UGF0aChmaWxlUGF0aCk7XG4gICAgY29uc3QgY29udGVudHMgPSBlZGl0b3IuZ2V0VGV4dCgpO1xuXG4gICAgbGV0IGRpYWdub3N0aWNzO1xuICAgIGlmIChoYWNrTGFuZ3VhZ2UuaXNIYWNrQXZhaWxhYmxlKCkpIHtcbiAgICAgIGRpYWdub3N0aWNzID0gYXdhaXQgaGFja0xhbmd1YWdlLmdldFNlcnZlckRpYWdub3N0aWNzKGZpbGVQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlhZ25vc3RpY3MgPSBhd2FpdCBoYWNrTGFuZ3VhZ2UuZ2V0RGlhZ25vc3RpY3MobG9jYWxQYXRoLCBjb250ZW50cyk7XG4gICAgfVxuICAgIHJldHVybiBkaWFnbm9zdGljcztcbiAgfSxcblxuICBhc3luYyBmZXRjaENvbXBsZXRpb25zRm9yRWRpdG9yKGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yLCBwcmVmaXg6IHN0cmluZyk6IFByb21pc2U8QXJyYXk8YW55Pj4ge1xuICAgIGNvbnN0IGhhY2tMYW5ndWFnZSA9IGF3YWl0IGdldEhhY2tMYW5ndWFnZUZvclVyaShlZGl0b3IuZ2V0UGF0aCgpKTtcbiAgICBjb25zdCBmaWxlUGF0aCA9IGVkaXRvci5nZXRQYXRoKCk7XG4gICAgaWYgKCFoYWNrTGFuZ3VhZ2UgfHwgIWZpbGVQYXRoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgaW52YXJpYW50KGZpbGVQYXRoKTtcbiAgICBjb25zdCBjb250ZW50cyA9IGVkaXRvci5nZXRUZXh0KCk7XG4gICAgY29uc3QgY3Vyc29yID0gZWRpdG9yLmdldExhc3RDdXJzb3IoKTtcbiAgICBjb25zdCBvZmZzZXQgPSBlZGl0b3IuZ2V0QnVmZmVyKCkuY2hhcmFjdGVySW5kZXhGb3JQb3NpdGlvbihjdXJzb3IuZ2V0QnVmZmVyUG9zaXRpb24oKSk7XG4gICAgLy8gVGhlIHJldHVybmVkIGNvbXBsZXRpb25zIG1heSBoYXZlIHVucmVsYXRlZCByZXN1bHRzLCBldmVuIHRob3VnaCB0aGUgb2Zmc2V0IGlzIHNldCBvbiB0aGUgZW5kIG9mIHRoZSBwcmVmaXguXG4gICAgY29uc3QgY29tcGxldGlvbnMgPSBhd2FpdCBoYWNrTGFuZ3VhZ2UuZ2V0Q29tcGxldGlvbnMoZmlsZVBhdGgsIGNvbnRlbnRzLCBvZmZzZXQpO1xuICAgIC8vIEZpbHRlciBvdXQgdGhlIGNvbXBsZXRpb25zIHRoYXQgZG8gbm90IGNvbnRhaW4gdGhlIHByZWZpeCBhcyBhIHRva2VuIGluIHRoZSBtYXRjaCB0ZXh0IGNhc2UgaW5zZW50aXZlbHkuXG4gICAgY29uc3QgdG9rZW5Mb3dlckNhc2UgPSBwcmVmaXgudG9Mb3dlckNhc2UoKTtcblxuICAgIGNvbnN0IGhhY2tDb21wbGV0aW9uc0NvbXBhcnRvciA9IGNvbXBhcmVIYWNrQ29tcGxldGlvbnMocHJlZml4KTtcbiAgICByZXR1cm4gY29tcGxldGlvbnNcbiAgICAgIC5maWx0ZXIoY29tcGxldGlvbiA9PiBjb21wbGV0aW9uLm1hdGNoVGV4dC50b0xvd2VyQ2FzZSgpLmluZGV4T2YodG9rZW5Mb3dlckNhc2UpID49IDApXG4gICAgICAvLyBTb3J0IHRoZSBhdXRvLWNvbXBsZXRpb25zIGJhc2VkIG9uIGEgc2NvcmluZyBmdW5jdGlvbiBjb25zaWRlcmluZzpcbiAgICAgIC8vIGNhc2Ugc2Vuc2l0aXZpdHksIHBvc2l0aW9uIGluIHRoZSBjb21wbGV0aW9uLCBwcml2YXRlIGZ1bmN0aW9ucyBhbmQgYWxwaGFiZXRpY2FsIG9yZGVyLlxuICAgICAgLnNvcnQoKGNvbXBsZXRpb24xLCBjb21wbGV0aW9uMikgPT4gaGFja0NvbXBsZXRpb25zQ29tcGFydG9yKGNvbXBsZXRpb24xLm1hdGNoVGV4dCwgY29tcGxldGlvbjIubWF0Y2hUZXh0KSk7XG4gIH0sXG5cbiAgYXN5bmMgZm9ybWF0U291cmNlRnJvbUVkaXRvcihlZGl0b3I6IGF0b20kVGV4dEVkaXRvciwgcmFuZ2U6IGF0b20kUmFuZ2UpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IGJ1ZmZlciA9IGVkaXRvci5nZXRCdWZmZXIoKTtcbiAgICBjb25zdCBmaWxlUGF0aCA9IGVkaXRvci5nZXRQYXRoKCk7XG4gICAgY29uc3QgaGFja0xhbmd1YWdlID0gYXdhaXQgZ2V0SGFja0xhbmd1YWdlRm9yVXJpKGZpbGVQYXRoKTtcbiAgICBpZiAoIWhhY2tMYW5ndWFnZSB8fCAhZmlsZVBhdGgpIHtcbiAgICAgIHJldHVybiBidWZmZXIuZ2V0VGV4dEluUmFuZ2UocmFuZ2UpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSBidWZmZXIuY2hhcmFjdGVySW5kZXhGb3JQb3NpdGlvbihyYW5nZS5zdGFydCk7XG4gICAgY29uc3QgZW5kUG9zaXRpb24gPSBidWZmZXIuY2hhcmFjdGVySW5kZXhGb3JQb3NpdGlvbihyYW5nZS5lbmQpO1xuICAgIHJldHVybiBhd2FpdCBoYWNrTGFuZ3VhZ2UuZm9ybWF0U291cmNlKGJ1ZmZlci5nZXRUZXh0KCksIHN0YXJ0UG9zaXRpb24gKyAxLCBlbmRQb3NpdGlvbiArIDEpO1xuICB9LFxuXG4gIGFzeW5jIGNvZGVIaWdobGlnaHRGcm9tRWRpdG9yKFxuICAgIGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yLFxuICAgIHBvc2l0aW9uOiBhdG9tJFBvaW50LFxuICApOiBQcm9taXNlPEFycmF5PGF0b20kUmFuZ2U+PiB7XG4gICAgY29uc3QgaGFja0xhbmd1YWdlID0gYXdhaXQgZ2V0SGFja0xhbmd1YWdlRm9yVXJpKGVkaXRvci5nZXRQYXRoKCkpO1xuICAgIGlmICghaGFja0xhbmd1YWdlKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3QgbWF0Y2hEYXRhID0gZXh0cmFjdFdvcmRBdFBvc2l0aW9uKGVkaXRvciwgcG9zaXRpb24sIEhBQ0tfV09SRF9SRUdFWCk7XG4gICAgaWYgKFxuICAgICAgIW1hdGNoRGF0YSB8fFxuICAgICAgIW1hdGNoRGF0YS53b3JkTWF0Y2gubGVuZ3RoIHx8XG4gICAgICAhbWF0Y2hEYXRhLndvcmRNYXRjaFswXS5zdGFydHNXaXRoKCckJylcbiAgICApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFja0xhbmd1YWdlLmhpZ2hsaWdodFNvdXJjZShcbiAgICAgIGdldFBhdGgoZWRpdG9yLmdldFBhdGgoKSB8fCAnJyksXG4gICAgICBlZGl0b3IuZ2V0VGV4dCgpLFxuICAgICAgcG9zaXRpb24ucm93ICsgMSxcbiAgICAgIHBvc2l0aW9uLmNvbHVtbixcbiAgICApO1xuICB9LFxuXG4gIGFzeW5jIHR5cGVIaW50RnJvbUVkaXRvcihlZGl0b3I6IGF0b20kVGV4dEVkaXRvciwgcG9zaXRpb246IGF0b20kUG9pbnQpOiBQcm9taXNlPD9UeXBlSGludD4ge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gZWRpdG9yLmdldFBhdGgoKTtcbiAgICBjb25zdCBoYWNrTGFuZ3VhZ2UgPSBhd2FpdCBnZXRIYWNrTGFuZ3VhZ2VGb3JVcmkoZmlsZVBhdGgpO1xuICAgIGlmICghaGFja0xhbmd1YWdlIHx8ICFmaWxlUGF0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgbWF0Y2hEYXRhID0gZXh0cmFjdFdvcmRBdFBvc2l0aW9uKGVkaXRvciwgcG9zaXRpb24sIEhBQ0tfV09SRF9SRUdFWCk7XG4gICAgaWYgKCFtYXRjaERhdGEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHBhdGggPSBnZXRQYXRoKGZpbGVQYXRoKTtcbiAgICBjb25zdCBjb250ZW50cyA9IGVkaXRvci5nZXRUZXh0KCk7XG5cbiAgICBjb25zdCB0eXBlID0gYXdhaXQgaGFja0xhbmd1YWdlLmdldFR5cGUocGF0aCwgY29udGVudHMsIG1hdGNoRGF0YS53b3JkTWF0Y2hbMF0sIHBvc2l0aW9uLnJvdyArIDEsIHBvc2l0aW9uLmNvbHVtbiArIDEpO1xuICAgIGlmICghdHlwZSB8fCB0eXBlID09PSAnXycpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBoaW50OiB0eXBlLFxuICAgICAgICByYW5nZTogbWF0Y2hEYXRhLnJhbmdlLFxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIElmIGEgbG9jYXRpb24gY2FuIGJlIGZvdW5kIGZvciB0aGUgZGVjbGFyYXRpb24sIHRoZSByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiByZXNvbHZlIHRvIGFuIG9iamVjdCB3aXRoIHRoZXNlIGZpZWxkczogZmlsZSwgbGluZSwgY29sdW1uLlxuICAgKi9cbiAgYXN5bmMgZmluZERlZmluaXRpb24oXG4gICAgZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IsXG4gICAgbGluZTogbnVtYmVyLFxuICAgIGNvbHVtbjogbnVtYmVyLFxuICApOiBQcm9taXNlPD9BcnJheTxPYmplY3Q+PiB7XG4gICAgY29uc3QgaGFja0xhbmd1YWdlID0gYXdhaXQgZ2V0SGFja0xhbmd1YWdlRm9yVXJpKGVkaXRvci5nZXRQYXRoKCkpO1xuICAgIGNvbnN0IGZpbGVQYXRoID0gZWRpdG9yLmdldFBhdGgoKTtcbiAgICBpZiAoIWhhY2tMYW5ndWFnZSB8fCAhZmlsZVBhdGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbnRlbnRzID0gZWRpdG9yLmdldFRleHQoKTtcbiAgICBjb25zdCBidWZmZXIgPSBlZGl0b3IuZ2V0QnVmZmVyKCk7XG4gICAgY29uc3QgbGluZVRleHQgPSBidWZmZXIubGluZUZvclJvdyhsaW5lKTtcbiAgICBjb25zdCBwb3NpdGlvbnMgPSBhd2FpdCBoYWNrTGFuZ3VhZ2UuZ2V0RGVmaW5pdGlvbihcbiAgICAgIGZpbGVQYXRoLCBjb250ZW50cywgbGluZSArIDEsIGNvbHVtbiArIDEsIGxpbmVUZXh0XG4gICAgKTtcbiAgICBpZiAocG9zaXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBwb3NpdGlvbnMubWFwKHBvc2l0aW9uID0+IHtcbiAgICAgIGxldCByYW5nZSA9IG51bGw7XG4gICAgICAvLyBJZiB0aGUgc2VhcmNoIHN0cmluZyB3YXMgZXhwYW5kZWQgdG8gaW5jbHVkZSBtb3JlIHRoYW4gYSB2YWxpZCByZWdleCBwaHAgd29yZC5cbiAgICAgIC8vIGUuZy4gaW4gY2FzZSBvZiBYSFAgdGFncywgdGhlIHN0YXJ0IGFuZCBlbmQgY29sdW1uIGFyZSBwcm92aWRlZCB0byB1bmRlcmxpbmUgdGhlIGZ1bGwgcmFuZ2VcbiAgICAgIC8vIHRvIHZpc2l0IGl0cyBkZWZpbml0aW9uLlxuICAgICAgaWYgKHBvc2l0aW9uLnNlYXJjaFN0YXJ0Q29sdW1uICYmIHBvc2l0aW9uLnNlYXJjaEVuZENvbHVtbikge1xuICAgICAgICByYW5nZSA9IG5ldyBSYW5nZShbbGluZSwgcG9zaXRpb24uc2VhcmNoU3RhcnRDb2x1bW5dLCBbbGluZSwgcG9zaXRpb24uc2VhcmNoRW5kQ29sdW1uXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5wb3NpdGlvbixcbiAgICAgICAgcmFuZ2UsXG4gICAgICB9O1xuICAgIH0pO1xuICB9LFxuXG4gIGFzeW5jIGZpbmRSZWZlcmVuY2VzKFxuICAgIGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yLFxuICAgIGxpbmU6IG51bWJlcixcbiAgICBjb2x1bW46IG51bWJlclxuICApOiBQcm9taXNlPD97YmFzZVVyaTogc3RyaW5nLCBzeW1ib2xOYW1lOiBzdHJpbmc7IHJlZmVyZW5jZXM6IEFycmF5PEhhY2tSZWZlcmVuY2U+fT4ge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gZWRpdG9yLmdldFBhdGgoKTtcbiAgICBjb25zdCBoYWNrTGFuZ3VhZ2UgPSBhd2FpdCBnZXRIYWNrTGFuZ3VhZ2VGb3JVcmkoZmlsZVBhdGgpO1xuICAgIGlmICghaGFja0xhbmd1YWdlIHx8ICFmaWxlUGF0aCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgY29udGVudHMgPSBlZGl0b3IuZ2V0VGV4dCgpO1xuICAgIGNvbnN0IHN5bWJvbCA9IGF3YWl0IGhhY2tMYW5ndWFnZS5nZXRTeW1ib2xOYW1lQXRQb3NpdGlvbldpdGhEZXBlbmRlbmNpZXMoXG4gICAgICBnZXRQYXRoKGZpbGVQYXRoKSxcbiAgICAgIGNvbnRlbnRzLFxuICAgICAgbGluZSArIDEsXG4gICAgICBjb2x1bW4gKyAxXG4gICAgKTtcbiAgICBpZiAoIXN5bWJvbCB8fCAhU1lNQk9MX1RZUEVTX1dJVEhfUkVGRVJFTkNFUy5oYXMoc3ltYm9sLnR5cGUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcmVmZXJlbmNlc1Jlc3VsdCA9IGF3YWl0IGhhY2tMYW5ndWFnZS5nZXRSZWZlcmVuY2VzKGZpbGVQYXRoLCBjb250ZW50cywgc3ltYm9sKTtcbiAgICBpZiAoIXJlZmVyZW5jZXNSZXN1bHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB7aGFja1Jvb3QsIHJlZmVyZW5jZXN9ID0gcmVmZXJlbmNlc1Jlc3VsdDtcbiAgICByZXR1cm4ge2Jhc2VVcmk6IGhhY2tSb290LCBzeW1ib2xOYW1lOiBzeW1ib2wubmFtZSwgcmVmZXJlbmNlc307XG4gIH0sXG5cbiAgYXN5bmMgaXNGaW5pc2hlZExvYWRpbmdEZXBlbmRlbmNpZXMoZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBoYWNrTGFuZ3VhZ2UgPSBhd2FpdCBnZXRIYWNrTGFuZ3VhZ2VGb3JVcmkoZWRpdG9yLmdldFBhdGgoKSk7XG4gICAgaWYgKGhhY2tMYW5ndWFnZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhY2tMYW5ndWFnZS5pc0ZpbmlzaGVkTG9hZGluZ0RlcGVuZGVuY2llcygpO1xuICB9LFxuXG4gIGFzeW5jIG9uRmluaXNoZWRMb2FkaW5nRGVwZW5kZW5jaWVzKFxuICAgIGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yLFxuICAgIGNhbGxiYWNrOiAoKCkgPT4gbWl4ZWQpLFxuICApOiBQcm9taXNlPGF0b20kRGlzcG9zYWJsZT4ge1xuICAgIGNvbnN0IGhhY2tMYW5ndWFnZSA9IGF3YWl0IGdldEhhY2tMYW5ndWFnZUZvclVyaShlZGl0b3IuZ2V0UGF0aCgpKTtcbiAgICBpZiAoaGFja0xhbmd1YWdlID09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm4gbmV3IERpc3Bvc2FibGUoKCkgPT4ge30pO1xuICAgIH1cbiAgICByZXR1cm4gaGFja0xhbmd1YWdlLm9uRmluaXNoZWRMb2FkaW5nRGVwZW5kZW5jaWVzKGNhbGxiYWNrKTtcbiAgfSxcblxuICBnZXRIYWNrTGFuZ3VhZ2VGb3JVcmksXG4gIGdldENhY2hlZEhhY2tMYW5ndWFnZUZvclVyaSxcbn07XG5cbi8vIFJldHVybnMgbnVsbCBpZiB3ZSBjYW4ndCBnZXQgdGhlIGtleSBhdCB0aGlzIHRpbWUgYmVjYXVzZSB0aGUgUmVtb3RlQ29ubmVjdGlvbiBpcyBpbml0aWFsaXppbmcuXG4vLyBUaGlzIGNhbiBoYXBwZW4gb24gc3RhcnR1cCB3aGVuIHJlbG9hZGluZyByZW1vdGUgZmlsZXMuXG5mdW5jdGlvbiBnZXRLZXlPZlVyaSh1cmk6IE51Y2xpZGVVcmkpOiA/c3RyaW5nIHtcbiAgY29uc3QgcmVtb3RlQ29ubmVjdGlvbiA9IFJlbW90ZUNvbm5lY3Rpb24uZ2V0Rm9yVXJpKHVyaSk7XG4gIHJldHVybiByZW1vdGVDb25uZWN0aW9uID09IG51bGwgP1xuICAgIChpc1JlbW90ZSh1cmkpID8gbnVsbCA6IExPQ0FMX1VSSV9LRVkpIDpcbiAgICByZW1vdGVDb25uZWN0aW9uLmdldFVyaUZvckluaXRpYWxXb3JraW5nRGlyZWN0b3J5KCk7XG59XG5cbmZ1bmN0aW9uIGdldENhY2hlZEhhY2tMYW5ndWFnZUZvclVyaSh1cmk6IE51Y2xpZGVVcmkpOiA/SGFja0xhbmd1YWdlIHtcbiAgY29uc3Qga2V5ID0gZ2V0S2V5T2ZVcmkodXJpKTtcbiAgcmV0dXJuIGtleSA9PSBudWxsID8gbnVsbCA6IHVyaVRvSGFja0xhbmd1YWdlLmdldCh1cmkpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRIYWNrTGFuZ3VhZ2VGb3JVcmkodXJpOiA/TnVjbGlkZVVyaSk6IFByb21pc2U8P0hhY2tMYW5ndWFnZT4ge1xuICBpZiAodXJpID09IG51bGwgfHwgdXJpLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IGtleSA9IGdldEtleU9mVXJpKHVyaSk7XG4gIGlmIChrZXkgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBhd2FpdCBjcmVhdGVIYWNrTGFuZ3VhZ2VJZk5vdEV4aXN0aW5nKGtleSwgdXJpKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlSGFja0xhbmd1YWdlSWZOb3RFeGlzdGluZyhcbiAga2V5OiBzdHJpbmcsXG4gIGZpbGVVcmk6IE51Y2xpZGVVcmksXG4pOiBQcm9taXNlPEhhY2tMYW5ndWFnZT4ge1xuICBpZiAoIXVyaVRvSGFja0xhbmd1YWdlLmhhcyhrZXkpKSB7XG4gICAgY29uc3QgaGFja0Vudmlyb25tZW50ID0gYXdhaXQgZ2V0SGFja1NlcnZpY2UoZmlsZVVyaSkuZ2V0SGFja0Vudmlyb25tZW50RGV0YWlscyhmaWxlVXJpKTtcbiAgICBjb25zdCBpc0hIQXZhaWxhYmxlID0gaGFja0Vudmlyb25tZW50ICE9IG51bGw7XG4gICAgY29uc3Qge2hhY2tSb290fSA9IGhhY2tFbnZpcm9ubWVudCB8fCB7fTtcblxuICAgIC8vIElmIG11bHRpcGxlIGNhbGxzIHdlcmUgZG9uZSBhc3luY2hyb25vdXNseSwgdGhlbiByZXR1cm4gdGhlIHNpbmdsZS1jcmVhdGVkIEhhY2tMYW5ndWFnZS5cbiAgICBpZiAoIXVyaVRvSGFja0xhbmd1YWdlLmhhcyhrZXkpKSB7XG4gICAgICB1cmlUb0hhY2tMYW5ndWFnZS5zZXQoa2V5LCBuZXcgSGFja0xhbmd1YWdlKGlzSEhBdmFpbGFibGUsIGhhY2tSb290LCBmaWxlVXJpKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1cmlUb0hhY2tMYW5ndWFnZS5nZXQoa2V5KTtcbn1cbiJdfQ==