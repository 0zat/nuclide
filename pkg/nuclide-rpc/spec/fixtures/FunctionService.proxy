"use babel";
import { Observable } from "rxjs";
import { trackTiming } from "../../nuclide-analytics";

module.exports = _client => {
  const remoteModule = {};

  remoteModule.TestFunctionA = function (arg0, arg1) {
    return _client.marshalArguments(Array.from(arguments), [{
      name: "arg1",
      type: {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 1
        },
        kind: "string"
      }
    }, {
      name: "arg2",
      type: {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 1
        },
        kind: "boolean"
      }
    }]).then(args => _client.callRemoteFunction("FunctionService/TestFunctionA", "promise", args)).then(value => _client.unmarshal(value, {
      location: {
        type: "source",
        fileName: "FunctionService.def",
        line: 1
      },
      kind: "array",
      type: {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 1
        },
        kind: "string"
      }
    }));
  }

  remoteModule.TestFunctionB = function () {
    return Observable.fromPromise(_client.marshalArguments(Array.from(arguments), []).then(args => _client.callRemoteFunction("FunctionService/TestFunctionB", "observable", args))).concatMap(id => id).concatMap(value => _client.unmarshal(value, {
      location: {
        type: "source",
        fileName: "FunctionService.def",
        line: 3
      },
      kind: "number"
    }));
  }

  remoteModule.TestFunctionC = function () {
    return _client.marshalArguments(Array.from(arguments), []).then(args => _client.callRemoteFunction("FunctionService/TestFunctionC", "void", args));
  }

  remoteModule.TestFunctionD = function (arg0, arg1) {
    return _client.marshalArguments(Array.from(arguments), [{
      name: "p1",
      type: {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 7
        },
        kind: "nullable",
        type: {
          location: {
            type: "source",
            fileName: "FunctionService.def",
            line: 7
          },
          kind: "named",
          name: "Object"
        }
      }
    }, {
      name: "p2",
      type: {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 7
        },
        kind: "nullable",
        type: {
          location: {
            type: "source",
            fileName: "FunctionService.def",
            line: 7
          },
          kind: "named",
          name: "Object"
        }
      }
    }]).then(args => _client.callRemoteFunction("FunctionService/TestFunctionD", "void", args));
  }

  remoteModule.ReturnAlias = function () {
    return _client.marshalArguments(Array.from(arguments), []).then(args => _client.callRemoteFunction("FunctionService/ReturnAlias", "promise", args)).then(value => _client.unmarshal(value, {
      location: {
        type: "source",
        fileName: "FunctionService.def",
        line: 9
      },
      kind: "number"
    }));
  }

  return remoteModule;
}