"use babel";
import { Observable } from "rxjs";
import { trackTiming } from "../../nuclide-analytics";

module.exports = _client => {
  const remoteModule = {};
  remoteModule.Vector2 = class {
    static distance(arg0, arg1) {
      return _client.marshalArguments(Array.from(arguments), [{
        name: "a",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 3
          },
          kind: "named",
          name: "Vector2"
        }
      }, {
        name: "b",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 3
          },
          kind: "named",
          name: "Vector2"
        }
      }]).then(args => _client.callRemoteFunction("Vector2/distance", "promise", args)).then(value => _client.unmarshal(value, {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 3
        },
        kind: "number"
      }));
    }
    constructor(arg0, arg1) {
      _client.createRemoteObject("Vector2", this, [arg0, arg1], [{
        name: "x",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 2
          },
          kind: "number"
        }
      }, {
        name: "y",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 2
          },
          kind: "nullable",
          type: {
            location: {
              type: "source",
              fileName: "InterfaceService.def",
              line: 2
            },
            kind: "number"
          }
        }
      }])
    }
    @trackTiming("Vector2.len")
    len() {
      return _client.marshalArguments(Array.from(arguments), []).then(args => _client.marshal(this, {
        kind: "named",
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 1
        },
        name: "Vector2"
      }).then(id => _client.callRemoteMethod(id, "len", "promise", args))).then(value => _client.unmarshal(value, {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 4
        },
        kind: "number"
      }));
    }
    watchChanges() {
      return Observable.fromPromise(_client.marshalArguments(Array.from(arguments), []).then(args => _client.marshal(this, {
        kind: "named",
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 1
        },
        name: "Vector2"
      }).then(id => _client.callRemoteMethod(id, "watchChanges", "observable", args)))).concatMap(id => id).concatMap(value => _client.unmarshal(value, {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 6
        },
        kind: "number"
      }));
    }
    dispose() {
      return _client.disposeRemoteObject(this);
    }
  }

  remoteModule.getCurrentDirection = function () {
    return _client.marshalArguments(Array.from(arguments), []).then(args => _client.callRemoteFunction("InterfaceService/getCurrentDirection", "promise", args)).then(value => _client.unmarshal(value, {
      location: {
        type: "source",
        fileName: "InterfaceService.def",
        line: 14
      },
      kind: "named",
      name: "Vector2"
    }));
  }

  remoteModule.Iface = class {
    @trackTiming("Iface.p")
    p(arg0) {
      return _client.marshalArguments(Array.from(arguments), [{
        name: {
          type: "Identifier",
          start: 642,
          end: 643,
          loc: {
            start: {
              line: 31,
              column: 4
            },
            end: {
              line: 31,
              column: 5
            }
          },
          name: "a"
        },
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 31
          },
          kind: "number"
        }
      }]).then(args => _client.marshal(this, {
        kind: "named",
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 30
        },
        name: "Iface"
      }).then(id => _client.callRemoteMethod(id, "p", "promise", args))).then(value => _client.unmarshal(value, {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 31
        },
        kind: "number"
      }));
    }
    f() {
      return _client.marshalArguments(Array.from(arguments), []).then(args => _client.marshal(this, {
        kind: "named",
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 30
        },
        name: "Iface"
      }).then(id => _client.callRemoteMethod(id, "f", "void", args)));
    }
    o() {
      return Observable.fromPromise(_client.marshalArguments(Array.from(arguments), []).then(args => _client.marshal(this, {
        kind: "named",
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 30
        },
        name: "Iface"
      }).then(id => _client.callRemoteMethod(id, "o", "observable", args)))).concatMap(id => id).concatMap(value => _client.unmarshal(value, {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 33
        },
        kind: "string"
      }));
    }
    dispose() {
      return _client.disposeRemoteObject(this);
    }
  }
  return remoteModule;
}