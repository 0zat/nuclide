"use strict";

let Observable, trackOperationTiming;

module.exports = _client => {
  const remoteModule = {};

  remoteModule.ValueTypeTestA = function (arg0, arg1) {
    return _client.marshalArguments(Array.from(arguments), [{
      name: "arg0",
      type: {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 15
        },
        kind: "named",
        name: "ValueTypeA"
      }
    }, {
      name: "arg1",
      type: {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 15
        },
        kind: "nullable",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 15
          },
          kind: "named",
          name: "ValueTypeB"
        }
      }
    }]).then(args => _client.callRemoteFunction("ValueTypes/ValueTypeTestA", "promise", args)).then(value => _client.unmarshal(value, {
      location: {
        type: "source",
        fileName: "ValueTypes.def",
        line: 15
      },
      kind: "named",
      name: "ValueTypeA"
    }));
  }

  remoteModule.ValueTypeTestB = function (arg0, arg1) {
    return _client.marshalArguments(Array.from(arguments), [{
      name: "arg0",
      type: {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 17
        },
        kind: "named",
        name: "ValueTypeA"
      }
    }, {
      name: "arg1",
      type: {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 17
        },
        kind: "array",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 17
          },
          kind: "named",
          name: "ValueTypeB"
        }
      }
    }]).then(args => _client.callRemoteFunction("ValueTypes/ValueTypeTestB", "promise", args)).then(value => _client.unmarshal(value, {
      location: {
        type: "source",
        fileName: "ValueTypes.def",
        line: 18
      },
      kind: "object",
      fields: [{
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 19
        },
        name: "field1",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 19
          },
          kind: "string"
        },
        optional: false
      }, {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 20
        },
        name: "field2",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 20
          },
          kind: "string"
        },
        optional: false
      }]
    }));
  }

  remoteModule.QualifiedTypeNameTest = function (arg0) {
    return _client.marshalArguments(Array.from(arguments), [{
      name: "arg0",
      type: {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 23
        },
        kind: "named",
        name: "fs.Stats"
      }
    }]).then(args => _client.callRemoteFunction("ValueTypes/QualifiedTypeNameTest", "void", args));
  }

  return remoteModule;
};

Object.defineProperty(module.exports, "inject", {
  value: function () {
    Observable = arguments[0];
    trackOperationTiming = arguments[1];
  }
});