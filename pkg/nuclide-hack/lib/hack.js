var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _nuclideAtomHelpers = require('../../nuclide-atom-helpers');

var _HackLanguage = require('./HackLanguage');

var _atom = require('atom');

var _utils = require('./utils');

var HACK_WORD_REGEX = /[a-zA-Z0-9_$]+/g;

module.exports = {

  findDiagnostics: _asyncToGenerator(function* (editor) {
    var filePath = editor.getPath();
    var hackLanguage = yield (0, _HackLanguage.getHackLanguageForUri)(filePath);
    if (!hackLanguage || !filePath) {
      return [];
    }

    (0, _assert2['default'])(filePath);
    var contents = editor.getText();

    return yield hackLanguage.getDiagnostics(filePath, contents);
  }),

  fetchCompletionsForEditor: _asyncToGenerator(function* (editor, prefix) {
    var hackLanguage = yield (0, _HackLanguage.getHackLanguageForUri)(editor.getPath());
    var filePath = editor.getPath();
    if (!hackLanguage || !filePath) {
      return [];
    }

    (0, _assert2['default'])(filePath);
    var contents = editor.getText();
    var cursor = editor.getLastCursor();
    var offset = editor.getBuffer().characterIndexForPosition(cursor.getBufferPosition());
    // The returned completions may have unrelated results, even though the offset is set on the end
    // of the prefix.
    var completions = yield hackLanguage.getCompletions(filePath, contents, offset);
    // Filter out the completions that do not contain the prefix as a token in the match text case
    // insentively.
    var tokenLowerCase = prefix.toLowerCase();

    var hackCompletionsCompartor = (0, _utils.compareHackCompletions)(prefix);
    return completions.filter(function (completion) {
      return completion.matchText.toLowerCase().indexOf(tokenLowerCase) >= 0;
    })
    // Sort the auto-completions based on a scoring function considering:
    // case sensitivity, position in the completion, private functions and alphabetical order.
    .sort(function (completion1, completion2) {
      return hackCompletionsCompartor(completion1.matchText, completion2.matchText);
    });
  }),

  formatSourceFromEditor: _asyncToGenerator(function* (editor, range) {
    var buffer = editor.getBuffer();
    var filePath = editor.getPath();
    var hackLanguage = yield (0, _HackLanguage.getHackLanguageForUri)(filePath);
    if (!hackLanguage || !filePath) {
      return buffer.getTextInRange(range);
    }

    var startPosition = buffer.characterIndexForPosition(range.start);
    var endPosition = buffer.characterIndexForPosition(range.end);
    return yield hackLanguage.formatSource(buffer.getText(), startPosition + 1, endPosition + 1);
  }),

  codeHighlightFromEditor: _asyncToGenerator(function* (editor, position) {
    var filePath = editor.getPath();
    var hackLanguage = yield (0, _HackLanguage.getHackLanguageForUri)(filePath);
    if (!hackLanguage) {
      return [];
    }
    (0, _assert2['default'])(filePath != null);

    var matchData = (0, _nuclideAtomHelpers.extractWordAtPosition)(editor, position, HACK_WORD_REGEX);
    if (!matchData || !matchData.wordMatch.length || !matchData.wordMatch[0].startsWith('$')) {
      return [];
    }

    return hackLanguage.highlightSource(filePath, editor.getText(), position.row + 1, position.column);
  }),

  typeHintFromEditor: _asyncToGenerator(function* (editor, position) {
    var filePath = editor.getPath();
    var hackLanguage = yield (0, _HackLanguage.getHackLanguageForUri)(filePath);
    if (!hackLanguage || !filePath) {
      return null;
    }

    var matchData = (0, _nuclideAtomHelpers.extractWordAtPosition)(editor, position, HACK_WORD_REGEX);
    if (!matchData) {
      return null;
    }

    var contents = editor.getText();

    var type = yield hackLanguage.getType(filePath, contents, matchData.wordMatch[0], position.row + 1, position.column + 1);
    if (!type || type === '_') {
      return null;
    } else {
      return {
        hint: type,
        range: matchData.range
      };
    }
  }),

  outlineFromEditor: _asyncToGenerator(function* (editor) {
    var filePath = editor.getPath();
    if (filePath == null) {
      return null;
    }
    var hackLanguage = yield (0, _HackLanguage.getHackLanguageForUri)(filePath);
    if (hackLanguage == null) {
      return null;
    }

    var contents = editor.getText();

    return yield hackLanguage.getOutline(filePath, contents);
  }),

  /**
   * If a location can be found for the declaration, the return value will
   * resolve to an object with these fields: file, line, column.
   */
  findDefinition: _asyncToGenerator(function* (editor, line, column) {
    var hackLanguage = yield (0, _HackLanguage.getHackLanguageForUri)(editor.getPath());
    var filePath = editor.getPath();
    if (!hackLanguage || !filePath) {
      return null;
    }

    var contents = editor.getText();
    var buffer = editor.getBuffer();
    var lineText = buffer.lineForRow(line);
    var positions = yield hackLanguage.getDefinition(filePath, contents, line + 1, column + 1, lineText);
    if (positions.length === 0) {
      return null;
    }
    return positions.map(function (position) {
      var range = null;
      // If the search string was expanded to include more than a valid regex php word.
      // e.g. in case of XHP tags, the start and end column are provided to underline the full range
      // to visit its definition.
      if (position.searchStartColumn && position.searchEndColumn) {
        range = new _atom.Range([line, position.searchStartColumn], [line, position.searchEndColumn]);
      }
      return _extends({}, position, {
        range: range
      });
    });
  }),

  findReferences: _asyncToGenerator(function* (editor, line, column) {
    var filePath = editor.getPath();
    var hackLanguage = yield (0, _HackLanguage.getHackLanguageForUri)(filePath);
    if (!hackLanguage || !filePath) {
      return null;
    }

    var contents = editor.getText();
    return yield hackLanguage.findReferences(filePath, contents, line, column);
  })
};
//# sourceMappingURL=data:application/json;base64,