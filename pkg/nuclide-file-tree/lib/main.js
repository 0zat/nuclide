var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _atom = require('atom');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _nuclideFeatureConfig = require('../../nuclide-feature-config');

var _nuclideFeatureConfig2 = _interopRequireDefault(_nuclideFeatureConfig);

var _nuclideWorkingSets = require('../../nuclide-working-sets');

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

/**
 * Minimum interval (in ms) between onChangeActivePaneItem events before revealing the active pane
 * item in the file tree.
 */
var ACTIVE_PANE_DEBOUNCE_INTERVAL_MS = 150;

var REVEAL_FILE_ON_SWITCH_SETTING = 'nuclide-file-tree.revealFileOnSwitch';

var Activation = (function () {
  function Activation(state) {
    _classCallCheck(this, Activation);

    this._packageState = state;
    this._subscriptions = new _atom.CompositeDisposable();

    var FileTreeController = require('./FileTreeController');
    this._fileTreeController = new FileTreeController(this._packageState);

    var excludeVcsIgnoredPathsSetting = 'core.excludeVcsIgnoredPaths';
    var hideIgnoredNamesSetting = 'nuclide-file-tree.hideIgnoredNames';
    var ignoredNamesSetting = 'core.ignoredNames';
    var prefixKeyNavSetting = 'nuclide-file-tree.allowKeyboardPrefixNavigation';
    var usePreviewTabs = 'tabs.usePreviewTabs';
    var allowPendingPaneItems = 'core.allowPendingPaneItems';

    this._subscriptions.add(_nuclideFeatureConfig2['default'].observe(prefixKeyNavSetting, this._setPrefixKeyNavSetting.bind(this)), _nuclideFeatureConfig2['default'].observe(REVEAL_FILE_ON_SWITCH_SETTING, this._setRevealOnFileSwitch.bind(this)), atom.config.observe(ignoredNamesSetting, this._setIgnoredNames.bind(this)), _nuclideFeatureConfig2['default'].observe(hideIgnoredNamesSetting, this._setHideIgnoredNames.bind(this)), atom.config.observe(excludeVcsIgnoredPathsSetting, this._setExcludeVcsIgnoredPaths.bind(this)));

    // The use preview tabs setting was removed from 'tabs' package in atom 1.6 and moved to core
    // instead. Until Atoms <1.6.0 are supported we need to be ready for both
    if (_semver2['default'].gte(atom.getVersion(), '1.6.0')) {
      this._subscriptions.add(atom.config.observe(allowPendingPaneItems, this._setUsePreviewTabs.bind(this)));
    } else {
      this._subscriptions.add(atom.config.observe(usePreviewTabs, this._setUsePreviewTabs.bind(this)));
    }
  }

  _createClass(Activation, [{
    key: 'consumeCwdApi',
    value: function consumeCwdApi(cwdApi) {
      (0, _assert2['default'])(this._fileTreeController);
      if (this._cwdApiSubscription != null) {
        this._cwdApiSubscription.dispose();
      }
      var controller = this._fileTreeController;
      controller.setCwdApi(cwdApi);
      this._cwdApiSubscription = new _atom.Disposable(function () {
        return controller.setCwdApi(null);
      });
      return this._cwdApiSubscription;
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this._deactivate();
      this._subscriptions.dispose();
    }
  }, {
    key: 'serialize',
    value: function serialize() {
      return this._fileTreeController.serialize();
    }
  }, {
    key: 'consumeWorkingSetsStore',
    value: function consumeWorkingSetsStore(workingSetsStore) {
      var _this = this;

      this._fileTreeController.updateWorkingSetsStore(workingSetsStore);
      this._fileTreeController.updateWorkingSet(workingSetsStore.getCurrent());

      var currentSubscription = workingSetsStore.subscribeToCurrent(function (currentWorkingSet) {
        _this._fileTreeController.updateWorkingSet(currentWorkingSet);
      });
      this._subscriptions.add(currentSubscription);

      var rebuildOpenFilesWorkingSet = function rebuildOpenFilesWorkingSet() {
        var openUris = atom.workspace.getTextEditors().filter(function (te) {
          return te.getPath() != null && te.getPath() !== '';
        }).map(function (te) {
          return te.getPath();
        });
        var openFilesWorkingSet = new _nuclideWorkingSets.WorkingSet(openUris);
        _this._fileTreeController.updateOpenFilesWorkingSet(openFilesWorkingSet);
      };

      rebuildOpenFilesWorkingSet();

      var paneObservingDisposable = new _atom.CompositeDisposable();
      paneObservingDisposable.add(atom.workspace.onDidAddPaneItem(rebuildOpenFilesWorkingSet));
      paneObservingDisposable.add(atom.workspace.onDidDestroyPaneItem(rebuildOpenFilesWorkingSet));

      this._subscriptions.add(paneObservingDisposable);

      return new _atom.Disposable(function () {
        _this._fileTreeController.updateWorkingSetsStore(null);
        _this._fileTreeController.updateWorkingSet(new _nuclideWorkingSets.WorkingSet());
        _this._fileTreeController.updateOpenFilesWorkingSet(new _nuclideWorkingSets.WorkingSet());
        paneObservingDisposable.dispose();
        _this._subscriptions.remove(currentSubscription);
        currentSubscription.dispose();
      });
    }
  }, {
    key: '_setExcludeVcsIgnoredPaths',
    value: function _setExcludeVcsIgnoredPaths(excludeVcsIgnoredPaths) {
      this._fileTreeController.setExcludeVcsIgnoredPaths(excludeVcsIgnoredPaths);
    }
  }, {
    key: '_setHideIgnoredNames',
    value: function _setHideIgnoredNames(hideIgnoredNames) {
      this._fileTreeController.setHideIgnoredNames(hideIgnoredNames);
    }
  }, {
    key: '_setIgnoredNames',
    value: function _setIgnoredNames(ignoredNames) {
      var normalizedIgnoredNames = undefined;
      if (ignoredNames === '') {
        normalizedIgnoredNames = [];
      } else if (typeof ignoredNames === 'string') {
        normalizedIgnoredNames = [ignoredNames];
      } else {
        normalizedIgnoredNames = ignoredNames;
      }
      this._fileTreeController.setIgnoredNames(normalizedIgnoredNames);
    }
  }, {
    key: '_setRevealOnFileSwitch',
    value: function _setRevealOnFileSwitch(shouldReveal) {
      var _this2 = this;

      var onWorkspaceDidStopChangingActivePaneItem = require('../../nuclide-atom-helpers').atomEventDebounce.onWorkspaceDidStopChangingActivePaneItem;

      if (shouldReveal) {
        var reveal = function reveal() {
          _this2._fileTreeController.revealActiveFile( /* showIfHidden */false);
        };
        // Guard against this getting called multiple times
        if (!this._paneItemSubscription) {
          // Debounce tab change events to limit unneeded scrolling when changing or closing tabs
          // in quick succession.
          this._paneItemSubscription = onWorkspaceDidStopChangingActivePaneItem(reveal, ACTIVE_PANE_DEBOUNCE_INTERVAL_MS);
          this._subscriptions.add(this._paneItemSubscription);
        }
      } else {
        // Use a local so Flow can refine the type.
        var paneItemSubscription = this._paneItemSubscription;
        if (paneItemSubscription) {
          this._subscriptions.remove(paneItemSubscription);
          paneItemSubscription.dispose();
          this._paneItemSubscription = null;
        }
      }
    }
  }, {
    key: '_setPrefixKeyNavSetting',
    value: function _setPrefixKeyNavSetting(usePrefixNav) {
      // config is void during startup, signifying no config yet
      if (usePrefixNav == null || !this._fileTreeController) {
        return;
      }
      this._fileTreeController.setUsePrefixNav(usePrefixNav);
    }
  }, {
    key: '_setUsePreviewTabs',
    value: function _setUsePreviewTabs(usePreviewTabs) {
      // config is void during startup, signifying no config yet
      if (usePreviewTabs == null) {
        return;
      }
      this._fileTreeController.setUsePreviewTabs(usePreviewTabs);
    }
  }, {
    key: '_deactivate',
    value: function _deactivate() {
      // Guard against deactivate being called twice
      this._fileTreeController.destroy();
    }
  }]);

  return Activation;
})();

var activation = undefined;
var deserializedState = undefined;
var onDidActivateDisposable = undefined;
var sideBarDisposable = undefined;

function disableTreeViewPackage() {
  if (!atom.packages.isPackageDisabled('tree-view')) {
    // Calling `disablePackage` on a package first *loads* the package. This step must come
    // before calling `unloadPackage`.
    atom.packages.disablePackage('tree-view');
  }

  if (atom.packages.isPackageActive('tree-view')) {
    // Only *inactive* packages can be unloaded. Attempting to unload an active package is
    // considered an exception. Deactivating must come before unloading.
    atom.packages.deactivatePackage('tree-view');
  }

  if (atom.packages.isPackageLoaded('tree-view')) {
    atom.packages.unloadPackage('tree-view');
  }
}

module.exports = {
  activate: function activate(state) {
    (0, _assert2['default'])(activation == null);
    // Disable Atom's bundled 'tree-view' package. If this activation is happening during the
    // normal startup activation, the `onDidActivateInitialPackages` handler below must unload the
    // 'tree-view' because it will have been loaded during startup.
    disableTreeViewPackage();

    // Disabling and unloading Atom's bundled 'tree-view' must happen after activation because this
    // package's `activate` is called during an traversal of all initial packages to activate.
    // Disabling a package during the traversal has no effect if this is a startup load because
    // `PackageManager` does not re-load the list of packages to activate after each iteration.
    onDidActivateDisposable = atom.packages.onDidActivateInitialPackages(function () {
      disableTreeViewPackage();
      onDidActivateDisposable.dispose();
    });

    deserializedState = state;
    activation = new Activation(deserializedState);
  },

  deactivate: function deactivate() {
    var nuclideFeatures = require('../../../lib/nuclideFeatures');

    // Re-enable Atom's bundled 'tree-view' when this package is disabled to leave the user's
    // environment the way this package found it.
    if (nuclideFeatures.isFeatureDisabled('nuclide-file-tree') && atom.packages.isPackageDisabled('tree-view')) {
      atom.packages.enablePackage('tree-view');
    }

    if (sideBarDisposable != null) {
      sideBarDisposable.dispose();
    }

    if (!onDidActivateDisposable.disposed) {
      onDidActivateDisposable.dispose();
    }

    if (activation) {
      activation.dispose();
      activation = null;
    }
  },

  serialize: function serialize() {
    if (activation) {
      return activation.serialize();
    }
  },

  consumeNuclideSideBar: function consumeNuclideSideBar(sidebar) {
    (0, _assert2['default'])(activation);

    sidebar.registerView({
      getComponent: function getComponent() {
        return require('../components/FileTreeSidebarComponent');
      },
      onDidShow: function onDidShow() {
        // If "Reveal File on Switch" is enabled, ensure the scroll position is synced to where the
        // user expects when the side bar shows the file tree.
        if (_nuclideFeatureConfig2['default'].get(REVEAL_FILE_ON_SWITCH_SETTING)) {
          atom.commands.dispatch(atom.views.getView(atom.workspace), 'nuclide-file-tree:reveal-active-file');
        }
      },
      toggleCommand: 'nuclide-file-tree:toggle',
      viewId: 'nuclide-file-tree'
    });

    sideBarDisposable = new _atom.Disposable(function () {
      sidebar.destroyView('nuclide-file-tree');
    });

    return sideBarDisposable;
  },

  consumeWorkingSetsStore: function consumeWorkingSetsStore(workingSetsStore) {
    (0, _assert2['default'])(activation);

    return activation.consumeWorkingSetsStore(workingSetsStore);
  },

  consumeCwdApi: function consumeCwdApi(cwdApi) {
    (0, _assert2['default'])(activation);
    return activation.consumeCwdApi(cwdApi);
  }
};
//# sourceMappingURL=data:application/json;base64,