

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var PACKAGE_PREFIX_REGEXP = /^(nuclide|fb)-/;

function migrateConfig() {
  var allUserConfigs = atom.config.getRawValue(null, {
    sources: atom.config.getUserConfigPath()
  });

  // Migrate only if user config exists and is a non-null Object. Anything else is outside what the
  // migration is able to handle.
  if (typeof allUserConfigs !== 'object' || allUserConfigs == null) {
    return;
  }

  // Having performed migrations is a proxy for deciding whether this is the first time these
  // migrations have been run. If any settings matching `PACKAGE_PREFIX_REGEXP` are found, this is
  // likely the first time the 'nuclide' package has been activated.
  var didMigrate = false;
  Object.keys(allUserConfigs).forEach(function (k) {
    if (PACKAGE_PREFIX_REGEXP.test(k)) {
      var newConfig = atom.config.get('nuclide');

      if (typeof newConfig !== 'object' || newConfig == null) {
        // If no 'nuclide' config has been set yet, initialize it with an empty object so it can
        // be populated with the old settings.
        newConfig = {};
      }

      newConfig[k] = allUserConfigs[k];
      atom.config.setRawValue('nuclide', newConfig);

      // Remove old setting so it is not migrated again.
      atom.config.unset(k);

      // Track that a setting in need of migration was found.
      didMigrate = true;
    }
  });

  // Remove obsolete remote-projects setting
  atom.config.unset('nuclide.remoteProjectsConfig');

  // If any migrations were performed, forcibly enable the 'incompatible-packages' package because
  // it may have been disabled programmatically via internal means. Only do this while migrating so
  // users can re-disable the package normally after an initial migration.
  if (didMigrate) {
    var disabledPackages = atom.config.get('core.disabledPackages');
    if (Array.isArray(disabledPackages)) {
      var incompatPkgsIndex = disabledPackages.indexOf('incompatible-packages');
      if (incompatPkgsIndex >= 0) {
        disabledPackages.splice(incompatPkgsIndex, 1);
        atom.config.setRawValue('core.disabledPackages', disabledPackages);
      }
    }
  }
}

module.exports = {
  migrateConfig: migrateConfig
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm51Y2xpZGVNaWdyYXRpb25zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFXQSxJQUFNLHFCQUFxQixHQUFHLGdCQUFnQixDQUFDOztBQUUvQyxTQUFTLGFBQWEsR0FBUztBQUM3QixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUU7QUFDbkQsV0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUU7R0FDekMsQ0FBQyxDQUFDOzs7O0FBSUgsTUFBSSxPQUFPLGNBQWMsS0FBSyxRQUFRLElBQUksY0FBYyxJQUFJLElBQUksRUFBRTtBQUNoRSxXQUFPO0dBQ1I7Ozs7O0FBS0QsTUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLFFBQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVMsQ0FBQyxFQUFFO0FBQzlDLFFBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQ2pDLFVBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDOztBQUUzQyxVQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsSUFBSSxTQUFTLElBQUksSUFBSSxFQUFFOzs7QUFHdEQsaUJBQVMsR0FBRyxFQUFFLENBQUM7T0FDaEI7O0FBRUQsZUFBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqQyxVQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7OztBQUc5QyxVQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7O0FBR3JCLGdCQUFVLEdBQUcsSUFBSSxDQUFDO0tBQ25CO0dBQ0YsQ0FBQyxDQUFDOzs7QUFHSCxNQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDOzs7OztBQUtsRCxNQUFJLFVBQVUsRUFBRTtBQUNkLFFBQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUNsRSxRQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtBQUNuQyxVQUFNLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQzVFLFVBQUksaUJBQWlCLElBQUksQ0FBQyxFQUFFO0FBQzFCLHdCQUFnQixDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QyxZQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO09BQ3BFO0tBQ0Y7R0FDRjtDQUNGOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDZixlQUFhLEVBQWIsYUFBYTtDQUNkLENBQUMiLCJmaWxlIjoibnVjbGlkZU1pZ3JhdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5jb25zdCBQQUNLQUdFX1BSRUZJWF9SRUdFWFAgPSAvXihudWNsaWRlfGZiKS0vO1xuXG5mdW5jdGlvbiBtaWdyYXRlQ29uZmlnKCk6IHZvaWQge1xuICBjb25zdCBhbGxVc2VyQ29uZmlncyA9IGF0b20uY29uZmlnLmdldFJhd1ZhbHVlKG51bGwsIHtcbiAgICBzb3VyY2VzOiBhdG9tLmNvbmZpZy5nZXRVc2VyQ29uZmlnUGF0aCgpLFxuICB9KTtcblxuICAvLyBNaWdyYXRlIG9ubHkgaWYgdXNlciBjb25maWcgZXhpc3RzIGFuZCBpcyBhIG5vbi1udWxsIE9iamVjdC4gQW55dGhpbmcgZWxzZSBpcyBvdXRzaWRlIHdoYXQgdGhlXG4gIC8vIG1pZ3JhdGlvbiBpcyBhYmxlIHRvIGhhbmRsZS5cbiAgaWYgKHR5cGVvZiBhbGxVc2VyQ29uZmlncyAhPT0gJ29iamVjdCcgfHwgYWxsVXNlckNvbmZpZ3MgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEhhdmluZyBwZXJmb3JtZWQgbWlncmF0aW9ucyBpcyBhIHByb3h5IGZvciBkZWNpZGluZyB3aGV0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgdGhlc2VcbiAgLy8gbWlncmF0aW9ucyBoYXZlIGJlZW4gcnVuLiBJZiBhbnkgc2V0dGluZ3MgbWF0Y2hpbmcgYFBBQ0tBR0VfUFJFRklYX1JFR0VYUGAgYXJlIGZvdW5kLCB0aGlzIGlzXG4gIC8vIGxpa2VseSB0aGUgZmlyc3QgdGltZSB0aGUgJ251Y2xpZGUnIHBhY2thZ2UgaGFzIGJlZW4gYWN0aXZhdGVkLlxuICBsZXQgZGlkTWlncmF0ZSA9IGZhbHNlO1xuICBPYmplY3Qua2V5cyhhbGxVc2VyQ29uZmlncykuZm9yRWFjaChmdW5jdGlvbihrKSB7XG4gICAgaWYgKFBBQ0tBR0VfUFJFRklYX1JFR0VYUC50ZXN0KGspKSB7XG4gICAgICBsZXQgbmV3Q29uZmlnID0gYXRvbS5jb25maWcuZ2V0KCdudWNsaWRlJyk7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV3Q29uZmlnICE9PSAnb2JqZWN0JyB8fCBuZXdDb25maWcgPT0gbnVsbCkge1xuICAgICAgICAvLyBJZiBubyAnbnVjbGlkZScgY29uZmlnIGhhcyBiZWVuIHNldCB5ZXQsIGluaXRpYWxpemUgaXQgd2l0aCBhbiBlbXB0eSBvYmplY3Qgc28gaXQgY2FuXG4gICAgICAgIC8vIGJlIHBvcHVsYXRlZCB3aXRoIHRoZSBvbGQgc2V0dGluZ3MuXG4gICAgICAgIG5ld0NvbmZpZyA9IHt9O1xuICAgICAgfVxuXG4gICAgICBuZXdDb25maWdba10gPSBhbGxVc2VyQ29uZmlnc1trXTtcbiAgICAgIGF0b20uY29uZmlnLnNldFJhd1ZhbHVlKCdudWNsaWRlJywgbmV3Q29uZmlnKTtcblxuICAgICAgLy8gUmVtb3ZlIG9sZCBzZXR0aW5nIHNvIGl0IGlzIG5vdCBtaWdyYXRlZCBhZ2Fpbi5cbiAgICAgIGF0b20uY29uZmlnLnVuc2V0KGspO1xuXG4gICAgICAvLyBUcmFjayB0aGF0IGEgc2V0dGluZyBpbiBuZWVkIG9mIG1pZ3JhdGlvbiB3YXMgZm91bmQuXG4gICAgICBkaWRNaWdyYXRlID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFJlbW92ZSBvYnNvbGV0ZSByZW1vdGUtcHJvamVjdHMgc2V0dGluZ1xuICBhdG9tLmNvbmZpZy51bnNldCgnbnVjbGlkZS5yZW1vdGVQcm9qZWN0c0NvbmZpZycpO1xuXG4gIC8vIElmIGFueSBtaWdyYXRpb25zIHdlcmUgcGVyZm9ybWVkLCBmb3JjaWJseSBlbmFibGUgdGhlICdpbmNvbXBhdGlibGUtcGFja2FnZXMnIHBhY2thZ2UgYmVjYXVzZVxuICAvLyBpdCBtYXkgaGF2ZSBiZWVuIGRpc2FibGVkIHByb2dyYW1tYXRpY2FsbHkgdmlhIGludGVybmFsIG1lYW5zLiBPbmx5IGRvIHRoaXMgd2hpbGUgbWlncmF0aW5nIHNvXG4gIC8vIHVzZXJzIGNhbiByZS1kaXNhYmxlIHRoZSBwYWNrYWdlIG5vcm1hbGx5IGFmdGVyIGFuIGluaXRpYWwgbWlncmF0aW9uLlxuICBpZiAoZGlkTWlncmF0ZSkge1xuICAgIGNvbnN0IGRpc2FibGVkUGFja2FnZXMgPSBhdG9tLmNvbmZpZy5nZXQoJ2NvcmUuZGlzYWJsZWRQYWNrYWdlcycpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRpc2FibGVkUGFja2FnZXMpKSB7XG4gICAgICBjb25zdCBpbmNvbXBhdFBrZ3NJbmRleCA9IGRpc2FibGVkUGFja2FnZXMuaW5kZXhPZignaW5jb21wYXRpYmxlLXBhY2thZ2VzJyk7XG4gICAgICBpZiAoaW5jb21wYXRQa2dzSW5kZXggPj0gMCkge1xuICAgICAgICBkaXNhYmxlZFBhY2thZ2VzLnNwbGljZShpbmNvbXBhdFBrZ3NJbmRleCwgMSk7XG4gICAgICAgIGF0b20uY29uZmlnLnNldFJhd1ZhbHVlKCdjb3JlLmRpc2FibGVkUGFja2FnZXMnLCBkaXNhYmxlZFBhY2thZ2VzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1pZ3JhdGVDb25maWcsXG59O1xuIl19