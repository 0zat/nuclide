var _require = require('event-kit');

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var Emitter = _require.Emitter;

var emitter = new Emitter();

module.exports = {
  dispose: function dispose() {
    if (emitter === null) {
      throw new Error('Nuclide features emitter has been disposed');
    }

    emitter.dispose();
    emitter = null;
  },

  didLoadInitialFeatures: function didLoadInitialFeatures() {
    if (emitter === null) {
      throw new Error('Nuclide features emitter has been disposed');
    }

    emitter.emit('did-load-initial-features');
  },

  didActivateInitialFeatures: function didActivateInitialFeatures() {
    if (emitter === null) {
      throw new Error('Nuclide features emitter has been disposed');
    }

    emitter.emit('did-activate-initial-features');
  },

  onDidLoadInitialFeatures: function onDidLoadInitialFeatures(callback) {
    if (emitter === null) {
      throw new Error('Nuclide features emitter has been disposed');
    }

    return emitter.on('did-load-initial-features', callback);
  },

  onDidActivateInitialFeatures: function onDidActivateInitialFeatures(callback) {
    if (emitter === null) {
      throw new Error('Nuclide features emitter has been disposed');
    }

    return emitter.on('did-activate-initial-features', callback);
  },

  /**
   * Returns `true` if the feature with the given name is disabled either directly or because the
   *   'nuclide' package itself is disabled.
   */
  isFeatureDisabled: function isFeatureDisabled(name) {
    return atom.packages.isPackageDisabled('nuclide') || !atom.config.get('nuclide.use.' + name);
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm51Y2xpZGVGZWF0dXJlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiZUFha0IsT0FBTyxDQUFDLFdBQVcsQ0FBQzs7Ozs7Ozs7OztJQUEvQixPQUFPLFlBQVAsT0FBTzs7QUFFZCxJQUFJLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDOztBQUU1QixNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsU0FBTyxFQUFBLG1CQUFTO0FBQ2QsUUFBSSxPQUFPLEtBQUssSUFBSSxFQUFFO0FBQ3BCLFlBQU0sSUFBSSxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQztLQUMvRDs7QUFFRCxXQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDbEIsV0FBTyxHQUFHLElBQUksQ0FBQztHQUNoQjs7QUFFRCx3QkFBc0IsRUFBQSxrQ0FBUztBQUM3QixRQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7QUFDcEIsWUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO0tBQy9EOztBQUVELFdBQU8sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQztHQUMzQzs7QUFFRCw0QkFBMEIsRUFBQSxzQ0FBUztBQUNqQyxRQUFJLE9BQU8sS0FBSyxJQUFJLEVBQUU7QUFDcEIsWUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO0tBQy9EOztBQUVELFdBQU8sQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUMsQ0FBQztHQUMvQzs7QUFFRCwwQkFBd0IsRUFBQSxrQ0FBQyxRQUFxQixFQUFjO0FBQzFELFFBQUksT0FBTyxLQUFLLElBQUksRUFBRTtBQUNwQixZQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7S0FDL0Q7O0FBRUQsV0FBTyxPQUFPLENBQUMsRUFBRSxDQUFDLDJCQUEyQixFQUFFLFFBQVEsQ0FBQyxDQUFDO0dBQzFEOztBQUVELDhCQUE0QixFQUFBLHNDQUFDLFFBQXFCLEVBQWM7QUFDOUQsUUFBSSxPQUFPLEtBQUssSUFBSSxFQUFFO0FBQ3BCLFlBQU0sSUFBSSxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQztLQUMvRDs7QUFFRCxXQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsK0JBQStCLEVBQUUsUUFBUSxDQUFDLENBQUM7R0FDOUQ7Ozs7OztBQU1ELG1CQUFpQixFQUFBLDJCQUFDLElBQVksRUFBVztBQUN2QyxXQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsa0JBQWdCLElBQUksQ0FBRyxDQUFDO0dBQzlGO0NBQ0YsQ0FBQyIsImZpbGUiOiJudWNsaWRlRmVhdHVyZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgdHlwZSB7RGlzcG9zYWJsZX0gZnJvbSAnYXRvbSc7XG5cbmNvbnN0IHtFbWl0dGVyfSA9IHJlcXVpcmUoJ2V2ZW50LWtpdCcpO1xuXG5sZXQgZW1pdHRlciA9IG5ldyBFbWl0dGVyKCk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkaXNwb3NlKCk6IHZvaWQge1xuICAgIGlmIChlbWl0dGVyID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ051Y2xpZGUgZmVhdHVyZXMgZW1pdHRlciBoYXMgYmVlbiBkaXNwb3NlZCcpO1xuICAgIH1cblxuICAgIGVtaXR0ZXIuZGlzcG9zZSgpO1xuICAgIGVtaXR0ZXIgPSBudWxsO1xuICB9LFxuXG4gIGRpZExvYWRJbml0aWFsRmVhdHVyZXMoKTogdm9pZCB7XG4gICAgaWYgKGVtaXR0ZXIgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTnVjbGlkZSBmZWF0dXJlcyBlbWl0dGVyIGhhcyBiZWVuIGRpc3Bvc2VkJyk7XG4gICAgfVxuXG4gICAgZW1pdHRlci5lbWl0KCdkaWQtbG9hZC1pbml0aWFsLWZlYXR1cmVzJyk7XG4gIH0sXG5cbiAgZGlkQWN0aXZhdGVJbml0aWFsRmVhdHVyZXMoKTogdm9pZCB7XG4gICAgaWYgKGVtaXR0ZXIgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTnVjbGlkZSBmZWF0dXJlcyBlbWl0dGVyIGhhcyBiZWVuIGRpc3Bvc2VkJyk7XG4gICAgfVxuXG4gICAgZW1pdHRlci5lbWl0KCdkaWQtYWN0aXZhdGUtaW5pdGlhbC1mZWF0dXJlcycpO1xuICB9LFxuXG4gIG9uRGlkTG9hZEluaXRpYWxGZWF0dXJlcyhjYWxsYmFjazogKCkgPT4gbWl4ZWQpOiBEaXNwb3NhYmxlIHtcbiAgICBpZiAoZW1pdHRlciA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOdWNsaWRlIGZlYXR1cmVzIGVtaXR0ZXIgaGFzIGJlZW4gZGlzcG9zZWQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW1pdHRlci5vbignZGlkLWxvYWQtaW5pdGlhbC1mZWF0dXJlcycsIGNhbGxiYWNrKTtcbiAgfSxcblxuICBvbkRpZEFjdGl2YXRlSW5pdGlhbEZlYXR1cmVzKGNhbGxiYWNrOiAoKSA9PiBtaXhlZCk6IERpc3Bvc2FibGUge1xuICAgIGlmIChlbWl0dGVyID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ051Y2xpZGUgZmVhdHVyZXMgZW1pdHRlciBoYXMgYmVlbiBkaXNwb3NlZCcpO1xuICAgIH1cblxuICAgIHJldHVybiBlbWl0dGVyLm9uKCdkaWQtYWN0aXZhdGUtaW5pdGlhbC1mZWF0dXJlcycsIGNhbGxiYWNrKTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGZlYXR1cmUgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBpcyBkaXNhYmxlZCBlaXRoZXIgZGlyZWN0bHkgb3IgYmVjYXVzZSB0aGVcbiAgICogICAnbnVjbGlkZScgcGFja2FnZSBpdHNlbGYgaXMgZGlzYWJsZWQuXG4gICAqL1xuICBpc0ZlYXR1cmVEaXNhYmxlZChuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gYXRvbS5wYWNrYWdlcy5pc1BhY2thZ2VEaXNhYmxlZCgnbnVjbGlkZScpIHx8ICFhdG9tLmNvbmZpZy5nZXQoYG51Y2xpZGUudXNlLiR7bmFtZX1gKTtcbiAgfSxcbn07XG4iXX0=